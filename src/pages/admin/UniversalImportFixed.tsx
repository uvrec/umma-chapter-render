import { useState, useCallback, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Progress } from "@/components/ui/progress";
import { toast } from "@/hooks/use-toast";
import { Globe, BookOpen, FileText, CheckCircle, Download, Upload } from "lucide-react";
import { useNavigate } from "react-router-dom";

import { ParserStatus } from "@/components/admin/ParserStatus";
import { parseVedabaseCC, getMaxVerseFromChapter } from "@/utils/vedabaseParser";
import { parseBhaktivinodaPage, getBhaktivinodaTitle, bhaktivinodaSongToChapter } from "@/utils/bhaktivinodaParser";
import { supabase } from "@/integrations/supabase/client";
import { normalizeTransliteration } from "@/utils/text/translitNormalize";
import { importSingleChapter } from "@/utils/import/importer";
import { extractTextFromPDF } from "@/utils/import/pdf";
import { extractTextFromEPUB } from "@/utils/import/epub";
import { extractTextFromDOCX } from "@/utils/import/docx";
import { splitIntoChapters } from "@/utils/import/splitters";
import { BOOK_TEMPLATES, ImportTemplate } from "@/types/book-import";
import { VEDABASE_BOOKS, getBookConfigByVedabaseSlug } from "@/utils/Vedabase-books";

// –¢–∏–ø–∏ —Å—Ç–∞–Ω—ñ–≤
type ImportSource = "file" | "vedabase" | "gitabase" | "bhaktivinoda";
type Step = "source" | "file" | "intro" | "normalize" | "process" | "preview" | "save";

interface ImportData {
  source: ImportSource;
  rawText: string;
  processedText: string;
  chapters: any[];
  metadata: {
    title_ua: string;
    title_en: string;
    author: string;
    book_slug?: string;
    vedabase_slug?: string;
    volume?: string;
    canto?: string;
    lila_name?: string;
    source_url?: string;
  };
}

// TODO: –î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É bhaktivinodainstitute.org –¥–ª—è –ø—ñ—Å–µ–Ω—å —Ç–∞ –ø–æ–µ–º (–®—ñ–∫—à–∞—à—Ç–∞–∫–∞, –®–∞—Ä–∞–Ω–∞–≥–∞—Ç—ñ —Ç–æ—â–æ)

// üëá –≥–æ–ª–æ–≤–Ω–∞ –∑–º—ñ–Ω–Ω–∞: –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
const PARSE_ENDPOINT = import.meta.env.VITE_PARSER_URL
  ? `${import.meta.env.VITE_PARSER_URL}/admin/parse-web-chapter`
  : "http://127.0.0.1:5003/admin/parse-web-chapter";

export default function UniversalImportFixed() {
  const [currentStep, setCurrentStep] = useState<Step>("source");
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [importData, setImportData] = useState<ImportData>({
    source: "file",
    rawText: "",
    processedText: "",
    chapters: [],
    metadata: {
      title_ua: "",
      title_en: "",
      author: "–®—Ä—ñ–ª–∞ –ü—Ä–∞–±–≥—É–ø–∞–¥–∞",
    },
  });

  // Vedabase
  const [vedabaseBook, setVedabaseBook] = useState("cc");
  const [vedabaseCanto, setVedabaseCanto] = useState("");
  const [vedabaseChapter, setVedabaseChapter] = useState("");
  const [vedabaseVerse, setVedabaseVerse] = useState("");

  // File import
  const [fileText, setFileText] = useState("");
  const [selectedTemplate, setSelectedTemplate] = useState<string>("bhagavad-gita");
  const [parsedChapters, setParsedChapters] = useState<any[]>([]);
  const [selectedChapterIndex, setSelectedChapterIndex] = useState<number>(0);

  const navigate = useNavigate();

  const currentBookInfo = useMemo(
    () => getBookConfigByVedabaseSlug(vedabaseBook),
    [vedabaseBook]
  );

  const lilaNum = useMemo(() => {
    const map: Record<string, number> = { adi: 1, madhya: 2, antya: 3 };
    return map[vedabaseCanto.toLowerCase()] || 1;
  }, [vedabaseCanto]);

  /** –Ü–º–ø–æ—Ä—Ç –∑ Vedabase */
  const handleVedabaseImport = useCallback(async () => {
    if (!vedabaseChapter) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≥–ª–∞–≤–∏", variant: "destructive" });
      return;
    }
    setIsProcessing(true);
    setProgress(10);

    try {
      const chapterNum = parseInt(vedabaseChapter, 10);
      const bookInfo = getBookConfigByVedabaseSlug(vedabaseBook)!;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ—Ä—à —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
      let verseRanges = vedabaseVerse;
      if (!verseRanges) {
        try {
          // ‚úÖ –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
          const chapterUrl = bookInfo.isMultiVolume
            ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/`
            : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/`;

          const { data: chapterData } = await supabase.functions.invoke("fetch-html", { body: { url: chapterUrl } });
          const maxVerse = getMaxVerseFromChapter(chapterData.html);
          verseRanges = maxVerse > 0 ? `1-${maxVerse}` : "1-500";
          toast({ title: "üìñ –í–∏–∑–Ω–∞—á–µ–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω", description: `–í—ñ—Ä—à—ñ 1-${maxVerse > 0 ? maxVerse : 500}` });
        } catch {
          verseRanges = "1-500"; // –ó–±—ñ–ª—å—à–µ–Ω–æ default –ª—ñ–º—ñ—Ç –¥–æ 500
        }
      }

      // ‚úÖ –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤—ñ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
      const vedabase_base = bookInfo.isMultiVolume
        ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/`
        : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/`;

      const gitabase_base = bookInfo.isMultiVolume
        ? `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${lilaNum}/${chapterNum}`
        : `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${chapterNum}`;

      let result: any = null;

      try {
        console.log("üêç Trying Python parser at:", PARSE_ENDPOINT);
        toast({ title: "Python –ø–∞—Ä—Å–µ—Ä", description: "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ Flask API..." });
        const response = await fetch(PARSE_ENDPOINT, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            lila: lilaNum,
            chapter: chapterNum,
            verse_ranges: verseRanges,
            vedabase_base,
            gitabase_base,
          }),
        });

        if (!response.ok) throw new Error(`Parser HTTP ${response.status}: ${response.statusText}`);
        result = await response.json();
        console.log("üêç Python parser result:", result?.verses?.length, "verses");
        // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ: —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è ‚Äî –ø—Ä–∏–º—É—Å–æ–≤–æ fallback
        const badResult = !Array.isArray(result?.verses) || !result.verses.length ||
          result.verses.every((v: any) => !(v?.translation_en || v?.translation_ua || v?.synonyms_en || v?.synonyms_ua || v?.commentary_en || v?.commentary_ua));
        if (badResult) {
          throw new Error("Python result is empty/incomplete ‚Äî switching to browser fallback");
        }
        toast({ title: "‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤", description: "–û—Ç—Ä–∏–º–∞–Ω–æ JSON" });
      } catch (err: any) {
        console.log("üêç Python parser failed, using browser fallback:", err.message);
        toast({ title: "‚ö†Ô∏è Browser fallback", description: "–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Edge-—Ñ—É–Ω–∫—Ü—ñ—ó (EN + UA)" });

        const [start, end] = verseRanges.includes("-")
          ? verseRanges.split("-").map(Number)
          : [parseInt(verseRanges, 10), parseInt(verseRanges, 10)];

        const verses: any[] = [];

        // üß≠ 1) –ó–Ω—ñ–º–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Å–∏–ª–∞–Ω—å –∑ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≥–ª–∞–≤–∏ (—â–æ–± –≤–∏—è–≤–ª—è—Ç–∏ "7-8", "10-16")
        try {
          // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è URL
          const chapterUrl = bookInfo.isMultiVolume
            ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/`
            : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/`;

          const { data: chapterHtml } = await supabase.functions.invoke("fetch-html", { body: { url: chapterUrl } });
          const map: Array<{ lastPart: string; from: number; to: number }> = [];
          if (chapterHtml?.html) {
            const dp = new DOMParser();
            const doc = dp.parseFromString(chapterHtml.html, 'text/html');

            // ‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–∞–∫–æ–∂ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
            const hrefPattern = bookInfo.isMultiVolume
              ? `/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/`
              : `/${vedabaseBook}/${chapterNum}/`;
            const anchors = Array.from(doc.querySelectorAll(`a[href*="${hrefPattern}"]`));
            anchors.forEach(a => {
              const href = a.getAttribute('href') || '';
              const seg = href.split('/').filter(Boolean).pop() || '';
              if (!seg) return;
              if (/^\d+(?:-\d+)?$/.test(seg)) {
                if (seg.includes('-')) {
                  const [s, e] = seg.split('-').map(n => parseInt(n, 10));
                  if (!Number.isNaN(s) && !Number.isNaN(e)) map.push({ lastPart: seg, from: s, to: e });
                } else {
                  const n = parseInt(seg, 10);
                  if (!Number.isNaN(n)) map.push({ lastPart: seg, from: n, to: n });
                }
              }
            });

            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Å–µ–≥–º–µ–Ω—Ç–∏, —â–æ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è –∑ [start, end], —Ç–∞ —É–Ω—ñ–∫–∞–ª—ñ–∑—É—î–º–æ –∑–∞ lastPart
            const unique = new Map<string, { lastPart: string; from: number; to: number }>();
            map
              .filter(m => !(m.to < start || m.from > end))
              .sort((a, b) => a.from - b.from)
              .forEach(m => unique.set(m.lastPart, m));

            const targets = Array.from(unique.values());

            // 2) –ü–∞—Ä—Å–∏–º–æ –∫–æ–∂–µ–Ω —Ç–∞—Ä–≥–µ—Ç —è–∫ –æ–∫—Ä–µ–º–∏–π –≤—ñ—Ä—à (–≤–∫–ª—é—á–Ω–æ –∑ –æ–±'—î–¥–Ω–∞–Ω–∏–º–∏)
            for (const t of targets) {
              try {
                // ‚úÖ –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
                const vedabaseUrl = bookInfo.isMultiVolume
                  ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/${t.lastPart}`
                  : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/${t.lastPart}`;

                // ‚úÖ Gitabase —Ç—ñ–ª—å–∫–∏ –¥–ª—è CC —Ç–∞ NoI
                const requests: Promise<any>[] = [
                  supabase.functions.invoke("fetch-html", { body: { url: vedabaseUrl } })
                ];

                if (bookInfo.hasGitabaseUA) {
                  const gitabaseUrl = bookInfo.isMultiVolume
                    ? `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${lilaNum}/${chapterNum}/${t.from}`
                    : `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${chapterNum}/${t.from}`;
                  requests.push(supabase.functions.invoke("fetch-html", { body: { url: gitabaseUrl } }));
                }

                const results = await Promise.allSettled(requests);
                const vedabaseRes = results[0];
                const gitabaseRes = bookInfo.hasGitabaseUA ? results[1] : null;

                let parsedEN: any = null;
                let parsedUA: any = null;

                if (vedabaseRes.status === "fulfilled" && vedabaseRes.value.data) {
                  parsedEN = parseVedabaseCC(vedabaseRes.value.data.html, vedabaseUrl);
                }

                // ‚úÖ –ü–∞—Ä—Å–∏–º–æ UA —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Ç
                if (bookInfo.hasGitabaseUA && gitabaseRes?.status === "fulfilled" && gitabaseRes.value.data) {
                  const gdp = new DOMParser();
                  const gdoc = gdp.parseFromString(gitabaseRes.value.data.html, 'text/html');
                  parsedUA = {
                    synonyms_ua: Array.from(gdoc.querySelectorAll('.r-synonyms-item')).map(item => {
                      const word = item.querySelector('.r-synonym')?.textContent?.trim() || '';
                      const meaning = item.querySelector('.r-synonim-text, .r-synonym-text')?.textContent?.trim() || '';
                      return word && meaning ? `${word} ‚Äî ${meaning}` : '';
                    }).filter(Boolean).join('; '),
                    translation_ua: gdoc.querySelector('.r-translation')?.textContent?.trim() || '',
                    commentary_ua: Array.from(gdoc.querySelectorAll('.r-purport p')).map(p => p.textContent?.trim()).filter(Boolean).join('\n\n')
                  };
                }

                // –¢—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ –≤—ñ—Ä—à —è–∫—â–æ —î —Ö–æ—á —è–∫–∏–π—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
                const hasContent = 
                  (parsedEN?.bengali || parsedEN?.transliteration || parsedEN?.synonyms || parsedEN?.translation || parsedEN?.purport) ||
                  (parsedUA?.synonyms_ua || parsedUA?.translation_ua || parsedUA?.commentary_ua);
                
                if (hasContent) {
                  verses.push({
                    verse_number: t.lastPart, // ‚Üê "7" –∞–±–æ "7-8"
                    sanskrit: parsedEN?.bengali || "",
                    transliteration_en: parsedEN?.transliteration || "",
                    transliteration_ua: "",
                    synonyms_en: parsedEN?.synonyms || "",
                    synonyms_ua: parsedUA?.synonyms_ua || "",
                    translation_en: parsedEN?.translation || "",
                    translation_ua: parsedUA?.translation_ua || "",
                    commentary_en: parsedEN?.purport || "",
                    commentary_ua: parsedUA?.commentary_ua || "",
                  });
                } else {
                  console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–µ–≥–º–µ–Ω—Ç ${t.lastPart} (–Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É)`);
                }
              } catch (e: any) {
                console.warn(`‚ö†Ô∏è Failed segment ${t.lastPart}:`, e.message);
              }
            }

            console.log(`‚úÖ Fallback parsed ${verses.length} segment(s)`);
            result = { verses };
          } else {
            throw new Error('No chapter HTML');
          }
        } catch (e) {
          console.warn('Chapter TOC parse failed, using simple numeric loop', e);
          // –ü—Ä–æ—Å—Ç–∏–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞–ª–≥–æ—Ä–∏—Ç–º (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–±–æ—é)
          for (let v = start; v <= end; v++) {
            try {
              // ‚úÖ –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
              const vedabaseUrl = bookInfo.isMultiVolume
                ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/${v}`
                : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/${v}`;

              // ‚úÖ Gitabase —Ç—ñ–ª—å–∫–∏ –¥–ª—è CC —Ç–∞ NoI
              const requests: Promise<any>[] = [
                supabase.functions.invoke("fetch-html", { body: { url: vedabaseUrl } })
              ];

              if (bookInfo.hasGitabaseUA) {
                const gitabaseUrl = bookInfo.isMultiVolume
                  ? `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${lilaNum}/${chapterNum}/${v}`
                  : `https://gitabase.com/ukr/${vedabaseBook.toUpperCase()}/${chapterNum}/${v}`;
                requests.push(supabase.functions.invoke("fetch-html", { body: { url: gitabaseUrl } }));
              }

              const results = await Promise.allSettled(requests);
              const vedabaseRes = results[0];
              const gitabaseRes = bookInfo.hasGitabaseUA ? results[1] : null;

              let parsedEN: any = null;
              let parsedUA: any = null;

              if (vedabaseRes.status === "fulfilled" && vedabaseRes.value.data) {
                parsedEN = parseVedabaseCC(vedabaseRes.value.data.html, vedabaseUrl);
              }

              // ‚úÖ –ü–∞—Ä—Å–∏–º–æ UA —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Ç
              if (bookInfo.hasGitabaseUA && gitabaseRes?.status === "fulfilled" && gitabaseRes.value.data) {
                const gitaDoc = new DOMParser().parseFromString(gitabaseRes.value.data.html, 'text/html');
                parsedUA = {
                  synonyms_ua: Array.from(gitaDoc.querySelectorAll('.r-synonyms-item')).map(item => {
                    const word = item.querySelector('.r-synonym')?.textContent?.trim() || '';
                    const meaning = item.querySelector('.r-synonim-text, .r-synonym-text')?.textContent?.trim() || '';
                    return word && meaning ? `${word} ‚Äî ${meaning}` : '';
                  }).filter(Boolean).join('; '),
                  translation_ua: gitaDoc.querySelector('.r-translation')?.textContent?.trim() || '',
                  commentary_ua: Array.from(gitaDoc.querySelectorAll('.r-purport p')).map(p => p.textContent?.trim()).filter(Boolean).join('\n\n')
                };
              }

              // –¢—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ –≤—ñ—Ä—à —è–∫—â–æ —î —Ö–æ—á —è–∫–∏–π—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
              const hasContent = 
                (parsedEN?.bengali || parsedEN?.transliteration || parsedEN?.synonyms || parsedEN?.translation || parsedEN?.purport) ||
                (parsedUA?.synonyms_ua || parsedUA?.translation_ua || parsedUA?.commentary_ua);
              
              if (hasContent) {
                verses.push({
                  verse_number: String(v),
                  sanskrit: parsedEN?.bengali || "",
                  transliteration_en: parsedEN?.transliteration || "",
                  transliteration_ua: "",
                  synonyms_en: parsedEN?.synonyms || "",
                  synonyms_ua: parsedUA?.synonyms_ua || "",
                  translation_en: parsedEN?.translation || "",
                  translation_ua: parsedUA?.translation_ua || "",
                  commentary_en: parsedEN?.purport || "",
                  commentary_ua: parsedUA?.commentary_ua || "",
                });
              } else {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ñ—Ä—à ${v} (–Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É)`);
              }
            } catch (e: any) {
              console.warn(`‚ö†Ô∏è Failed verse ${v}:`, e.message);
            }
            setProgress(10 + ((v - start + 1) / (end - start + 1)) * 80);
          }
          console.log(`‚úÖ Fallback parsed ${verses.length} verses`);
          result = { verses };
        }
      }

      console.log("üìä Final result:", {
        verses_count: result?.verses?.length,
        first_verse: result?.verses?.[0]
      });

      // üîß –î–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è EN –±–ª–æ–∫—ñ–≤ (synonyms/translation/purport) –∑ Vedabase, —è–∫—â–æ –ø–∞—Ä—Å–µ—Ä —ó—Ö –Ω–µ –¥–∞–≤
      if (Array.isArray(result?.verses) && result.verses.length) {
        let idx = 0;
        for (const v of result.verses) {
          const missingEn = !(v?.translation_en || v?.synonyms_en || v?.commentary_en);
          if (missingEn) {
            try {
              const verseUrl = `${vedabase_base}${v.verse_number}`;
              const { data } = await supabase.functions.invoke("fetch-html", { body: { url: verseUrl } });
              const parsed = data?.html ? parseVedabaseCC(data.html, verseUrl) : null;
              if (parsed) {
                v.sanskrit = v.sanskrit || parsed.bengali || "";
                v.transliteration_en = v.transliteration_en || parsed.transliteration || "";
                v.synonyms_en = v.synonyms_en || parsed.synonyms || "";
                v.translation_en = v.translation_en || parsed.translation || "";
                v.commentary_en = v.commentary_en || parsed.purport || "";
              }
            } catch (e) {
              console.warn("EN fill fail for verse", v?.verse_number, e);
            }
          }
          idx++;
          setProgress(20 + Math.round((idx / result.verses.length) * 20));
        }
      }

      if (!result?.verses?.length) {
        console.error("‚ùå No verses in result:", result);
        throw new Error("–ù–µ–º–∞—î –≤—ñ—Ä—à—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
      }

      const siteSlug = bookInfo.our_slug;

      const newImport: ImportData = {
        ...importData,
        source: "vedabase",
        rawText: JSON.stringify(result.verses, null, 2),
        processedText: JSON.stringify(result, null, 2),
        chapters: [
          {
            chapter_number: chapterNum,
            // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–∑–≤–∏ (–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –¥–ª—è –ë–î NOT NULL constraint)
            title_ua: importData.metadata.title_ua?.trim() || undefined,
            title_en: importData.metadata.title_en?.trim() ||
                     `${bookInfo?.name_ua || vedabaseBook.toUpperCase()} ${vedabaseCanto ? vedabaseCanto + ' ' : ''}${chapterNum}`,
            // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ intro —è–∫ content –¥–ª—è –≥–ª–∞–≤–∏
            ...(importData.chapters[0]?.intro_ua && { content_ua: importData.chapters[0].intro_ua }),
            ...(importData.chapters[0]?.intro_en && { content_en: importData.chapters[0].intro_en }),
            chapter_type: "verses" as const,
            verses: result.verses,
          },
        ],
        metadata: {
          ...importData.metadata,
          source_url: vedabase_base,
          book_slug: siteSlug,
          vedabase_slug: vedabaseBook,
          // ‚úÖ –¢—ñ–ª—å–∫–∏ –¥–ª—è –±–∞–≥–∞—Ç–æ—Ç–æ–º–Ω–∏—Ö –∫–Ω–∏–≥ –¥–æ–¥–∞—î–º–æ canto
          ...(bookInfo?.isMultiVolume && {
            canto: lilaNum.toString(),
            volume: vedabaseCanto,
          }),
        },
      };

      setImportData(newImport);


      setProgress(100);
      await saveToDatabase(newImport);
      return;
    } catch (e: any) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: e.message, variant: "destructive" });
    } finally {
      setIsProcessing(false);
      setProgress(0);
    }
  }, [vedabaseBook, vedabaseCanto, vedabaseChapter, vedabaseVerse, lilaNum]);

  /** –Ü–º–ø–æ—Ä—Ç –∑ Bhaktivinoda Institute */
  const handleBhaktivinodaImport = useCallback(async (url?: string) => {
    const bookInfo = getBookConfigByVedabaseSlug(vedabaseBook)!;
    const sourceUrl = url || bookInfo.sourceUrl;

    if (!sourceUrl) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "URL –Ω–µ –≤–∫–∞–∑–∞–Ω–æ", variant: "destructive" });
      return;
    }

    setIsProcessing(true);
    setProgress(10);

    try {
      toast({ title: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...", description: "–û—Ç—Ä–∏–º–∞–Ω–Ω—è HTML –∑ bhaktivinodainstitute.org" });

      // Fetch HTML through edge function
      const { data, error } = await supabase.functions.invoke("fetch-html", {
        body: { url: sourceUrl }
      });

      if (error || !data?.html) {
        throw new Error(error?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ HTML");
      }

      setProgress(30);
      toast({ title: "–ü–∞—Ä—Å–∏–Ω–≥...", description: "–†–æ–∑–±—ñ—Ä –ø—ñ—Å–µ–Ω—å —Ç–∞ –≤—ñ—Ä—à—ñ–≤" });

      // Parse the page
      const songs = parseBhaktivinodaPage(data.html, sourceUrl);
      const pageTitle = getBhaktivinodaTitle(data.html);

      if (!songs || songs.length === 0) {
        throw new Error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –ø—ñ—Å–Ω—ñ/–≤—ñ—Ä—à–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ");
      }

      setProgress(60);

      // Convert songs to chapters
      const chapters = songs.map((song, index) =>
        bhaktivinodaSongToChapter(song, index + 1)
      );

      // Create import data (EN ONLY - no UA from bhaktivinoda institute)
      const newImport: ImportData = {
        ...importData,
        source: "bhaktivinoda",
        rawText: data.html.substring(0, 1000), // Preview
        processedText: JSON.stringify(songs, null, 2),
        chapters: chapters,
        metadata: {
          ...importData.metadata,
          title_en: pageTitle.title_en || bookInfo.name_en,
          title_ua: bookInfo.name_ua, // Use book config for UA
          author: bookInfo.author || "Bhaktivinoda Thakur",
          book_slug: bookInfo.our_slug,
          source_url: sourceUrl,
        },
      };

      setImportData(newImport);
      setProgress(100);

      toast({
        title: "‚úÖ –£—Å–ø—ñ—à–Ω–æ!",
        description: `–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${chapters.length} –ø—ñ—Å–µ–Ω—å (${chapters.reduce((acc, ch) => acc + ch.verses.length, 0)} –≤—ñ—Ä—à—ñ–≤)`
      });

      await saveToDatabase(newImport);

    } catch (e: any) {
      console.error("Bhaktivinoda import error:", e);
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: e.message, variant: "destructive" });
    } finally {
      setIsProcessing(false);
      setProgress(0);
    }
  }, [vedabaseBook, importData]);

  /** –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É */
  const handleFileUpload = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);
    setProgress(10);

    try {
      let extractedText = "";
      const ext = file.name.split(".").pop()?.toLowerCase();

      if (file.type === "application/pdf" || ext === "pdf") {
        toast({ title: "–û–±—Ä–æ–±–∫–∞ PDF...", description: "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å" });
        extractedText = await extractTextFromPDF(file);
      } else if (file.type === "application/epub+zip" || ext === "epub") {
        toast({ title: "–û–±—Ä–æ–±–∫–∞ EPUB..." });
        extractedText = await extractTextFromEPUB(file);
      } else if (
        ext === "docx" ||
        file.type === "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      ) {
        toast({ title: "–û–±—Ä–æ–±–∫–∞ DOCX..." });
        extractedText = await extractTextFromDOCX(file);
      } else if (ext === "md" || file.type === "text/plain" || ext === "txt") {
        toast({ title: "–ß–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É..." });
        extractedText = await file.text();
      } else {
        toast({
          title: "–ü–æ–º–∏–ª–∫–∞",
          description: "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ PDF/DOCX/EPUB/TXT/MD.",
          variant: "destructive"
        });
        return;
      }

      if (!extractedText || !extractedText.trim()) {
        toast({
          title: "–ü–æ–º–∏–ª–∫–∞",
          description: "–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É",
          variant: "destructive"
        });
        return;
      }

      setFileText(extractedText);
      setProgress(50);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–∞—Ä—Å–∏–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      await parseFileText(extractedText);

      toast({ title: "‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", description: `${extractedText.length} —Å–∏–º–≤–æ–ª—ñ–≤` });
    } catch (err: any) {
      console.error(err);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É",
        description: err?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
      setProgress(0);
      e.target.value = "";
    }
  }, [selectedTemplate]);

  /** –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É –∑ —Ñ–∞–π–ª—É */
  const parseFileText = useCallback(async (text?: string) => {
    const textToParse = text || fileText;
    if (!textToParse.trim()) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É", variant: "destructive" });
      return;
    }

    setIsProcessing(true);
    setProgress(10);

    try {
      // –ó–Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω
      const template = BOOK_TEMPLATES.find(t => t.id === selectedTemplate) || BOOK_TEMPLATES[0];

      console.log("üìñ –ü–∞—Ä—Å–∏–Ω–≥ –∑ —à–∞–±–ª–æ–Ω–æ–º:", template.name);
      console.log("üìù –¢–µ–∫—Å—Ç –¥–æ–≤–∂–∏–Ω–∞:", textToParse.length);

      // –ü–∞—Ä—Å–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª–∏
      const chapters = splitIntoChapters(textToParse, template);

      console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤:", chapters.length);

      if (chapters.length === 0) {
        toast({
          title: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤",
          description: "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —à–∞–±–ª–æ–Ω –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É",
          variant: "destructive"
        });
        setParsedChapters([]);
        return;
      }

      setParsedChapters(chapters);
      setSelectedChapterIndex(0);

      toast({
        title: "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        description: `–ó–Ω–∞–π–¥–µ–Ω–æ ${chapters.length} —Ä–æ–∑–¥—ñ–ª(—ñ–≤), ${chapters.reduce((sum, ch) => sum + ch.verses.length, 0)} –≤—ñ—Ä—à—ñ–≤`
      });

      setProgress(100);
    } catch (err: any) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", err);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É",
        description: err?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
        variant: "destructive"
      });
      setParsedChapters([]);
    } finally {
      setIsProcessing(false);
      setProgress(0);
    }
  }, [fileText, selectedTemplate]);

  /** –Ü–º–ø–æ—Ä—Ç —Ä–æ–∑–¥—ñ–ª—É –∑ —Ñ–∞–π–ª—É */
  const handleFileChapterImport = useCallback(async () => {
    if (parsedChapters.length === 0) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–ù–µ–º–∞—î —Ä–æ–∑–¥—ñ–ª—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É", variant: "destructive" });
      return;
    }

    const chapter = parsedChapters[selectedChapterIndex];
    if (!chapter) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–†–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", variant: "destructive" });
      return;
    }

    setIsProcessing(true);
    setProgress(10);

    try {
      const slug = importData.metadata.book_slug || currentBookInfo?.our_slug || "imported-book";
      const { data: existing } = await supabase.from("books").select("id").eq("slug", slug).maybeSingle();

      let bookId = existing?.id;
      if (!bookId) {
        const { data: created, error } = await supabase
          .from("books")
          .insert({
            slug,
            title_ua: importData.metadata.title_ua || currentBookInfo?.name || "–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞",
            title_en: importData.metadata.title_en || currentBookInfo?.name || "Imported Book",
            is_published: true,
          })
          .select("id")
          .single();
        if (error) throw error;
        bookId = created.id;
      }

      // Resolve canto if needed
      let cantoId: string | null = null;
      if (vedabaseCanto && currentBookInfo?.isMultiVolume) {
        const cantoNum = parseInt(vedabaseCanto, 10);
        if (!isNaN(cantoNum)) {
          const { data: canto } = await supabase
            .from("cantos")
            .select("id")
            .eq("book_id", bookId)
            .eq("canto_number", cantoNum)
            .maybeSingle();
          cantoId = canto?.id || null;
        }
      }

      // Ensure chapter has title_en (required by database)
      const chapterToImport = {
        ...chapter,
        title_en: chapter.title_en ||
                  importData.metadata.title_en ||
                  chapter.title_ua ||
                  `Chapter ${chapter.chapter_number}`,
      };

      await importSingleChapter(supabase, {
        bookId,
        cantoId: cantoId ?? null,
        chapter: chapterToImport,
        strategy: "upsert",
      });

      toast({
        title: "‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        description: `–†–æ–∑–¥—ñ–ª ${chapter.chapter_number}: ${chapter.verses?.length || 0} –≤—ñ—Ä—à—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ`,
      });

      setProgress(100);

      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ —Ä–æ–∑–¥—ñ–ª—É
      const targetPath = cantoId
        ? `/veda-reader/${slug}/canto/${vedabaseCanto}/chapter/${chapter.chapter_number}`
        : `/veda-reader/${slug}/${chapter.chapter_number}`;

      navigate(targetPath);
    } catch (err: any) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:", err);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è",
        description: err?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
      setProgress(0);
    }
  }, [parsedChapters, selectedChapterIndex, importData, vedabaseBook, vedabaseCanto, currentBookInfo, navigate]);

  /** –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É */
  const saveToDatabase = useCallback(async (dataOverride?: ImportData) => {
    const data = dataOverride ?? importData;
    if (!data.chapters.length) {
      toast({ title: "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", variant: "destructive" });
      return;
    }

    setIsProcessing(true);
    setProgress(10);
    try {
      const slug = data.metadata.book_slug || "imported-book";
      const { data: existing } = await supabase.from("books").select("id").eq("slug", slug).maybeSingle();

      let bookId = existing?.id;
      if (!bookId) {
        const { data: created, error } = await supabase
          .from("books")
          .insert({
            slug,
            title_ua: data.metadata.title_ua,
            title_en: data.metadata.title_en,
            is_published: true,
          })
          .select("id")
          .single();
        if (error) throw error;
        bookId = created.id;
      }

      // Resolve canto (volume) if provided to link chapters correctly
      let cantoId: string | null = null;
      if (data.metadata.canto) {
        const cantoNum = parseInt(data.metadata.canto, 10);
        const { data: canto } = await supabase
          .from("cantos")
          .select("id")
          .eq("book_id", bookId)
          .eq("canto_number", cantoNum)
          .maybeSingle();
        cantoId = canto?.id || null;
      }

      // Import chapters safely: UPSERT (never delete existing verses)
      const total = data.chapters.length;
      for (let i = 0; i < total; i++) {
        const ch = data.chapters[i];

        // Ensure chapter has title_en (required by database)
        const chapterToImport = {
          ...ch,
          title_en: ch.title_en || ch.title_ua || `Chapter ${ch.chapter_number}`,
          title_ua: ch.title_ua || ch.title_en || `–ì–ª–∞–≤–∞ ${ch.chapter_number}`,
        };

        await importSingleChapter(supabase, {
          bookId,
          cantoId: cantoId ?? null,
          chapter: chapterToImport,
          strategy: "upsert",
        });
        setProgress(10 + Math.round(((i + 1) / total) * 80));
      }

      const totalVerses = data.chapters.reduce((sum, ch) => sum + (ch.verses?.length || 0), 0);
      toast({
        title: "‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        description: `${totalVerses} –≤—ñ—Ä—à—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`,
      });

      // –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–æ–∑–¥—ñ–ª—É –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
      const chapterNum = data.chapters[0]?.chapter_number;
      const slugForPath = data.metadata.book_slug || "library";
      const cantoNum = data.metadata.canto;
      const targetPath = cantoNum
        ? `/veda-reader/${slugForPath}/canto/${cantoNum}/chapter/${chapterNum}`
        : `/veda-reader/${slugForPath}/${chapterNum}`;

      setCurrentStep("save");
      navigate(targetPath);
    } catch (e: any) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", description: e.message, variant: "destructive" });
    } finally {
      setIsProcessing(false);
      setProgress(0);
    }
  }, [importData]);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Card>
        <CardHeader className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div className="flex items-center gap-2">
            <BookOpen className="w-6 h-6" />
            <CardTitle>Universal Book Import (Fixed)</CardTitle>
          </div>
          <div className="flex items-center gap-2">
            <ParserStatus />
            <Button variant="secondary" onClick={() => navigate(-1)}>–í–∏–π—Ç–∏</Button>
          </div>
        </CardHeader>

        <CardContent>
          {isProcessing && (
            <div className="mb-4">
              <Progress value={progress} className="w-full" />
              <p className="text-sm text-muted-foreground mt-1">–û–±—Ä–æ–±–∫–∞... {progress}%</p>
            </div>
          )}

          <Tabs value={currentStep} className="w-full">
            <TabsList className="grid w-full grid-cols-3 lg:grid-cols-6">
              <TabsTrigger value="source" onClick={() => setCurrentStep("source")}>
                <Globe className="w-4 h-4 mr-2" />
                Vedabase
              </TabsTrigger>
              <TabsTrigger value="file" onClick={() => setCurrentStep("file")}>
                <Upload className="w-4 h-4 mr-2" />
                –§–∞–π–ª
              </TabsTrigger>
              <TabsTrigger value="intro">Intro</TabsTrigger>
              <TabsTrigger value="normalize">Norm</TabsTrigger>
              <TabsTrigger value="preview">–ü–µ—Ä–µ–≥–ª—è–¥</TabsTrigger>
              <TabsTrigger value="save">–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è</TabsTrigger>
            </TabsList>

            <TabsContent value="source" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label>–ö–Ω–∏–≥–∞</Label>
                  <select
                    value={vedabaseBook}
                    onChange={(e) => setVedabaseBook(e.target.value)}
                    className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                  >
                    {VEDABASE_BOOKS.map((book) => (
                      <option key={book.slug} value={book.slug}>
                        {book.name_ua} ({book.slug.toUpperCase()})
                      </option>
                    ))}
                  </select>
                </div>
                {currentBookInfo?.isMultiVolume && (
                  <div>
                    <Label>{currentBookInfo?.volumeLabel}</Label>
                    <select
                      value={vedabaseCanto}
                      onChange={(e) => setVedabaseCanto(e.target.value)}
                      className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                    >
                      <option value="">–û–±–µ—Ä—ñ—Ç—å...</option>
                      {currentBookInfo.cantos?.map((c) => (
                        <option key={c} value={String(c)}>
                          {String(c)}
                        </option>
                      ))}
                    </select>
                  </div>
                )}
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label>–ì–ª–∞–≤–∞</Label>
                  <Input value={vedabaseChapter} onChange={(e) => setVedabaseChapter(e.target.value)} />
                </div>
                <div>
                  <Label>–í—ñ—Ä—à—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</Label>
                  <Input value={vedabaseVerse} onChange={(e) => setVedabaseVerse(e.target.value)} />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label>–ù–∞–∑–≤–∞ –≥–ª–∞–≤–∏ (UA)</Label>
                  <Input 
                    value={importData.metadata.title_ua} 
                    onChange={(e) => setImportData(prev => ({
                      ...prev,
                      metadata: { ...prev.metadata, title_ua: e.target.value }
                    }))}
                    placeholder={`${currentBookInfo?.name_ua} ${vedabaseCanto} ${vedabaseChapter}`}
                  />
                </div>
                <div>
                  <Label>–ù–∞–∑–≤–∞ –≥–ª–∞–≤–∏ (EN)</Label>
                  <Input 
                    value={importData.metadata.title_en} 
                    onChange={(e) => setImportData(prev => ({
                      ...prev,
                      metadata: { ...prev.metadata, title_en: e.target.value }
                    }))}
                    placeholder={`${vedabaseBook.toUpperCase()} ${vedabaseCanto} ${vedabaseChapter}`}
                  />
                </div>
              </div>

              <div className="flex gap-2">
                <Button onClick={handleVedabaseImport} disabled={isProcessing || currentBookInfo?.source === 'bhaktivinodainstitute'}>
                  <Globe className="w-4 h-4 mr-2" />
                  –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ Vedabase
                </Button>

                {currentBookInfo?.source === 'bhaktivinodainstitute' && (
                  <Button onClick={() => handleBhaktivinodaImport()} disabled={isProcessing} variant="secondary">
                    <BookOpen className="w-4 h-4 mr-2" />
                    –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ Bhaktivinoda Institute
                  </Button>
                )}
              </div>

              {currentBookInfo?.source === 'bhaktivinodainstitute' && (
                <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                  <p className="text-sm text-blue-900 dark:text-blue-100">
                    <strong>‚ÑπÔ∏è Bhaktivinoda Thakur:</strong> –Ü–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ <strong>EN</strong> —Å—Ç–æ—Ä–æ–Ω–∞
                    (transliteration + translation). Sanskrit, word-for-word —Ç–∞ commentary –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –≤—Ä—É—á–Ω—É.
                  </p>
                  {currentBookInfo?.sourceUrl && (
                    <p className="text-xs text-blue-700 dark:text-blue-300 mt-2">
                      –î–∂–µ—Ä–µ–ª–æ: {currentBookInfo.sourceUrl}
                    </p>
                  )}
                </div>
              )}
            </TabsContent>

            <TabsContent value="file" className="space-y-4">
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-semibold mb-2">–ö—Ä–æ–∫ 1: –û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É —Ç–∞ —à–∞–±–ª–æ–Ω</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label>–ö–Ω–∏–≥–∞</Label>
                      <select
                        value={vedabaseBook}
                        onChange={(e) => {
                          setVedabaseBook(e.target.value);
                          const book = getBookConfigByVedabaseSlug(e.target.value);
                          if (book?.templateId) {
                            setSelectedTemplate(book.templateId);
                          }
                        }}
                        className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                      >
                        {VEDABASE_BOOKS.map((book) => (
                          <option key={book.slug} value={book.slug}>
                            {book.name_ua} ({book.slug.toUpperCase()})
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <Label>–®–∞–±–ª–æ–Ω —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è</Label>
                      <select
                        value={selectedTemplate}
                        onChange={(e) => setSelectedTemplate(e.target.value)}
                        className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                      >
                        {BOOK_TEMPLATES.map((template) => (
                          <option key={template.id} value={template.id}>
                            {template.name}
                          </option>
                        ))}
                      </select>
                      <p className="text-xs text-muted-foreground mt-1">
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞–Ω–æ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–Ω–∏–≥–∏
                      </p>
                    </div>
                  </div>

                  {currentBookInfo?.isMultiVolume && (
                    <div className="mt-4">
                      <Label>{currentBookInfo?.volumeLabel}</Label>
                      <select
                        value={vedabaseCanto}
                        onChange={(e) => setVedabaseCanto(e.target.value)}
                        className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                      >
                        <option value="">–û–±–µ—Ä—ñ—Ç—å...</option>
                        {currentBookInfo.cantos?.map((c) => (
                          <option key={c} value={String(c)}>
                            {String(c)}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-2">–ö—Ä–æ–∫ 2: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª</h3>
                  <div className="rounded-lg border-2 border-dashed p-8 text-center">
                    <Upload className="mx-auto mb-4 h-12 w-12 text-muted-foreground" />
                    <label className="cursor-pointer">
                      <span className="text-primary hover:underline font-medium">
                        –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
                      </span>
                      <input
                        type="file"
                        className="hidden"
                        accept=".pdf,.epub,.txt,.md,.docx"
                        onChange={handleFileUpload}
                        disabled={isProcessing}
                      />
                    </label>
                    <p className="mt-2 text-sm text-muted-foreground">
                      –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: PDF, EPUB, DOCX, TXT, MD
                    </p>
                  </div>
                  {fileText && (
                    <div className="mt-4 p-4 bg-muted rounded-lg">
                      <p className="text-sm">
                        üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: <strong>{fileText.length.toLocaleString()}</strong> —Å–∏–º–≤–æ–ª—ñ–≤
                      </p>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => parseFileText()}
                        className="mt-2"
                        disabled={isProcessing}
                      >
                        üîÑ –ü–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º
                      </Button>
                    </div>
                  )}
                </div>

                {parsedChapters.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold mb-2">–ö—Ä–æ–∫ 3: –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>–†–æ–∑–¥—ñ–ª ({parsedChapters.length} –∑–Ω–∞–π–¥–µ–Ω–æ)</Label>
                        <select
                          value={selectedChapterIndex}
                          onChange={(e) => setSelectedChapterIndex(parseInt(e.target.value))}
                          className="flex h-10 w-full rounded-md border px-3 py-2 text-sm"
                        >
                          {parsedChapters.map((ch, idx) => (
                            <option key={idx} value={idx}>
                              –†–æ–∑–¥—ñ–ª {ch.chapter_number}: {ch.title_ua || ch.title_en || "–ë–µ–∑ –Ω–∞–∑–≤–∏"} (
                              {ch.verses?.length || 0} –≤—ñ—Ä—à—ñ–≤, —Ç–∏–ø: {ch.chapter_type})
                            </option>
                          ))}
                        </select>
                      </div>

                      <div className="p-4 bg-muted rounded-lg">
                        <h4 className="font-semibold mb-2">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥</h4>
                        {parsedChapters[selectedChapterIndex] && (
                          <div className="space-y-2 text-sm">
                            <p>
                              <strong>–ù–æ–º–µ—Ä:</strong> {parsedChapters[selectedChapterIndex].chapter_number}
                            </p>
                            <p>
                              <strong>–ù–∞–∑–≤–∞ (UA):</strong>{" "}
                              {parsedChapters[selectedChapterIndex].title_ua || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
                            </p>
                            <p>
                              <strong>–¢–∏–ø:</strong> {parsedChapters[selectedChapterIndex].chapter_type}
                            </p>
                            <p>
                              <strong>–í—ñ—Ä—à—ñ–≤:</strong> {parsedChapters[selectedChapterIndex].verses?.length || 0}
                            </p>
                            {parsedChapters[selectedChapterIndex].verses?.length > 0 && (
                              <div className="mt-3 p-3 bg-background rounded border">
                                <p className="font-semibold text-xs mb-2">–ü–µ—Ä—à–∏–π –≤—ñ—Ä—à:</p>
                                <p className="text-xs">
                                  <strong>‚Ññ:</strong> {parsedChapters[selectedChapterIndex].verses[0].verse_number}
                                </p>
                                {parsedChapters[selectedChapterIndex].verses[0].sanskrit && (
                                  <p className="text-xs mt-1">
                                    <strong>–°–∞–Ω—Å–∫—Ä–∏—Ç:</strong>{" "}
                                    {parsedChapters[selectedChapterIndex].verses[0].sanskrit.substring(0, 100)}...
                                  </p>
                                )}
                                {parsedChapters[selectedChapterIndex].verses[0].translation_ua && (
                                  <p className="text-xs mt-1">
                                    <strong>–ü–µ—Ä–µ–∫–ª–∞–¥:</strong>{" "}
                                    {parsedChapters[selectedChapterIndex].verses[0].translation_ua.substring(0, 150)}
                                    ...
                                  </p>
                                )}
                              </div>
                            )}
                          </div>
                        )}
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label>–ù–∞–∑–≤–∞ —Ä–æ–∑–¥—ñ–ª—É (UA) - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ</Label>
                          <Input
                            value={importData.metadata.title_ua}
                            onChange={(e) =>
                              setImportData((prev) => ({
                                ...prev,
                                metadata: { ...prev.metadata, title_ua: e.target.value },
                              }))
                            }
                            placeholder={parsedChapters[selectedChapterIndex]?.title_ua || "–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î"}
                          />
                        </div>
                        <div>
                          <Label>–ù–∞–∑–≤–∞ —Ä–æ–∑–¥—ñ–ª—É (EN) - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ</Label>
                          <Input
                            value={importData.metadata.title_en}
                            onChange={(e) =>
                              setImportData((prev) => ({
                                ...prev,
                                metadata: { ...prev.metadata, title_en: e.target.value },
                              }))
                            }
                            placeholder={parsedChapters[selectedChapterIndex]?.title_en || "–ó–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î"}
                          />
                        </div>
                      </div>

                      <Button onClick={handleFileChapterImport} disabled={isProcessing} className="w-full">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω–∏–π —Ä–æ–∑–¥—ñ–ª
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="intro" className="space-y-4">
              <div className="space-y-3">
                <Label>Intro (EN) ‚Äî –∑ Vedabase</Label>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={async () => {
                    try {
                      setIsProcessing(true);
                      const chapterNum = parseInt(vedabaseChapter || "0", 10);
                      const bookInfo = getBookConfigByVedabaseSlug(vedabaseBook)!;

                      // ‚úÖ –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–Ω–∏–≥–∏
                      const vedabase_base = bookInfo.isMultiVolume
                        ? `https://vedabase.io/en/library/${vedabaseBook}/${vedabaseCanto}/${chapterNum}/`
                        : `https://vedabase.io/en/library/${vedabaseBook}/${chapterNum}/`;
                      const res = await fetch(vedabase_base);
                      const html = await res.text();
                      const parser = new DOMParser();
                      const doc = parser.parseFromString(html, "text/html");
                      // –ì—Ä—É–±–∏–π —Ö–∞–∫: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –≤—ñ—Ä—à—ñ–≤
                      const allP = Array.from(doc.querySelectorAll("main p, .entry-content p"));
                      const introParas: string[] = [];
                      for (const p of allP) {
                        const txt = p.textContent?.trim() || "";
                        if (!txt) continue;
                        if (/[0-9]+\s*:\s*[0-9]+/.test(txt)) break; // –∑—É–ø–∏–Ω—è—î–º–æ—Å—å, —è–∫—â–æ —Å—Ö–æ–∂–µ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                        if (p.querySelector("a[href*='/cc/']")) break; // —Å–ø–∏—Å–æ–∫ –≤—ñ—Ä—à—ñ–≤
                        introParas.push(`<p>${txt}</p>`);
                        if (introParas.length >= 6) break; // –æ–±–º–µ–∂–∏–º–æ—Å—è
                      }
                      const introHtml = introParas.join("\n");
                      setImportData(prev => {
                        const chapters = prev.chapters.length ? [...prev.chapters] : [{ chapter_number: chapterNum, chapter_type: "verses", verses: [] }];
                        chapters[0] = { ...chapters[0], intro_en: introHtml };
                        return { ...prev, chapters };
                      });
                      toast({ title: "Intro –¥–æ–¥–∞–Ω–æ", description: `${introParas.length} –∞–±–∑–∞—Ü—ñ–≤` });
                    } catch (e: any) {
                      toast({ title: "Intro –ø–æ–º–∏–ª–∫–∞", description: e.message, variant: "destructive" });
                    } finally {
                      setIsProcessing(false);
                    }
                  }}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Intro EN</Button>
                </div>
                <Label>Intro (UA)</Label>
                <Textarea value={(importData.chapters[0]?.intro_ua)||""} onChange={(e)=>setImportData(prev=>{ const ch=[...prev.chapters]; if(!ch.length) ch.push({chapter_number: parseInt(vedabaseChapter||"0",10)||1, chapter_type:"verses", verses:[]}); ch[0]={...ch[0], intro_ua:e.target.value}; return {...prev, chapters: ch}; })} placeholder="–í—Å—Ç–∞–≤—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≤—Å—Ç—É–ø (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)" />
                <Label>Intro (EN)</Label>
                <Textarea value={(importData.chapters[0]?.intro_en)||""} onChange={(e)=>setImportData(prev=>{ const ch=[...prev.chapters]; if(!ch.length) ch.push({chapter_number: parseInt(vedabaseChapter||"0",10)||1, chapter_type:"verses", verses:[]}); ch[0]={...ch[0], intro_en:e.target.value}; return {...prev, chapters: ch}; })} placeholder="–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π –≤—Å—Ç—É–ø" />
              </div>
            </TabsContent>

            <TabsContent value="normalize" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Å–ª—ñ–≤–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤ (UA)</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground mb-3">–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—É –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—é –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫–∏ (ƒ±ÃÑ —Ç–æ—â–æ) –¥–æ –ø–æ–ª—è "synonyms_ua" —É –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—É.</p>
                  <Button variant="secondary" onClick={() => {
                    setImportData(prev => {
                      const chapters = prev.chapters.map(ch => ({
                        ...ch,
                        verses: ch.verses.map((v: any) => ({
                          ...v,
                          synonyms_ua: v.synonyms_ua ? normalizeTransliteration(v.synonyms_ua) : v.synonyms_ua,
                        })),
                      }));
                      return { ...prev, chapters };
                    });
                    toast({ title: "–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ", description: "–°–∏–º–≤–æ–ª–∏ –≤ –ø–æ—Å–ª—ñ–≤–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —É –¥–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—É" });
                  }}>–ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑</Button>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="preview" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>–ì–ª–∞–≤: {importData.chapters.length}</p>
                  <p>–°–∏–º–≤–æ–ª—ñ–≤ JSON: {importData.processedText.length}</p>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button onClick={() => saveToDatabase()}>
                  <Download className="w-4 h-4 mr-2" />
                  –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –±–∞–∑—É
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}