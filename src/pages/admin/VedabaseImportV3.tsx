// –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ê –≤–µ—Ä—Å—ñ—è VedabaseImportV3 - –ø–æ–∫–∞–∑—É—î —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ArrowLeft, Play } from "lucide-react";
import { toast } from "sonner";

export default function VedabaseImportV3() {
  const navigate = useNavigate();
  const [logs, setLogs] = useState<string[]>([]);
  const [isTestng, setIsTesting] = useState(false);

  const addLog = (msg: string) => {
    console.log(msg);
    setLogs((prev) => [...prev, `${new Date().toLocaleTimeString()}: ${msg}`]);
  };

  const testProxies = async () => {
    setIsTesting(true);
    setLogs([]);

    const testUrl = "https://vedabase.io/en/library/bg/1/1/";

    addLog("üß™ –¢–µ—Å—Ç 1: Supabase Edge Function...");
    try {
      const response = await fetch(
        "https://caf8c97b-0aea-4eba-8bd0-7e77e5a22197.supabase.co/functions/v1/fetch-proxy",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ url: testUrl }),
        },
      );
      const data = await response.json();
      if (data.html && data.html.length > 100) {
        addLog(`‚úÖ Supabase –ø—Ä–∞—Ü—é—î! (${data.html.length} —Å–∏–º–≤–æ–ª—ñ–≤)`);
      } else {
        addLog(`‚ùå Supabase: –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å`);
      }
    } catch (e) {
      addLog(`‚ùå Supabase: ${e instanceof Error ? e.message : "–ø–æ–º–∏–ª–∫–∞"}`);
    }

    await new Promise((r) => setTimeout(r, 1000));

    addLog("üß™ –¢–µ—Å—Ç 2: AllOrigins...");
    try {
      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(testUrl)}`;
      const response = await fetch(proxyUrl);
      const html = await response.text();
      if (html.length > 100) {
        addLog(`‚úÖ AllOrigins –ø—Ä–∞—Ü—é—î! (${html.length} —Å–∏–º–≤–æ–ª—ñ–≤)`);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î Sanskrit
        if (html.includes("sanskrit") || /[\u0980-\u09FF]/.test(html)) {
          addLog(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∞–Ω—Å–∫—Ä–∏—Ç –≤ HTML!`);
        } else {
          addLog(`‚ö†Ô∏è –°–∞–Ω—Å–∫—Ä–∏—Ç –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ HTML`);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if (html.includes("transliteration")) {
          addLog(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—é`);
        }
        if (html.includes("SYNONYMS") || html.includes("synonyms")) {
          addLog(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–Ω–æ–Ω—ñ–º–∏`);
        }
        if (html.includes("TRANSLATION") || html.includes("translation")) {
          addLog(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥`);
        }
      } else {
        addLog(`‚ùå AllOrigins: –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å`);
      }
    } catch (e) {
      addLog(`‚ùå AllOrigins: ${e instanceof Error ? e.message : "–ø–æ–º–∏–ª–∫–∞"}`);
    }

    await new Promise((r) => setTimeout(r, 1000));

    addLog("üß™ –¢–µ—Å—Ç 3: CORSProxy...");
    try {
      const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(testUrl)}`;
      const response = await fetch(proxyUrl);
      const html = await response.text();
      if (html.length > 100) {
        addLog(`‚úÖ CORSProxy –ø—Ä–∞—Ü—é—î! (${html.length} —Å–∏–º–≤–æ–ª—ñ–≤)`);
      } else {
        addLog(`‚ùå CORSProxy: –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å`);
      }
    } catch (e) {
      addLog(`‚ùå CORSProxy: ${e instanceof Error ? e.message : "–ø–æ–º–∏–ª–∫–∞"}`);
    }

    addLog("‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!");
    setIsTesting(false);
  };

  return (
    <div className="min-h-screen bg-background p-8">
      <Button variant="ghost" onClick={() => navigate("/admin/dashboard")} className="mb-4">
        <ArrowLeft className="w-4 h-4 mr-2" />
        –ù–∞–∑–∞–¥
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ñ–º–ø–æ—Ä—Ç—É V3</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-muted-foreground">
            –¶–µ–π —Ç–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å —á–∏ –ø—Ä–∞—Ü—é—é—Ç—å CORS –ø—Ä–æ–∫—Å—ñ —Ç–∞ —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ HTML –∑ Vedabase
          </p>

          <Button onClick={testProxies} disabled={isTesting} className="w-full">
            <Play className="w-4 h-4 mr-2" />
            {isTesting ? "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è..." : "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É"}
          </Button>

          {logs.length > 0 && (
            <div className="bg-black text-green-400 p-4 rounded font-mono text-xs overflow-auto max-h-96">
              {logs.map((log, i) => (
                <div key={i}>{log}</div>
              ))}
            </div>
          )}

          <div className="bg-muted p-4 rounded text-sm">
            <strong>–©–æ —Ç–µ—Å—Ç—É—î—Ç—å—Å—è:</strong>
            <ul className="list-disc ml-6 mt-2 space-y-1">
              <li>Supabase Edge Function fetch-proxy</li>
              <li>AllOrigins –ø—É–±–ª—ñ—á–Ω–∏–π proxy</li>
              <li>CORSProxy –ø—É–±–ª—ñ—á–Ω–∏–π proxy</li>
              <li>–ß–∏ —î —Å–∞–Ω—Å–∫—Ä–∏—Ç/–ø–µ—Ä–µ–∫–ª–∞–¥ –≤ –æ—Ç—Ä–∏–º–∞–Ω–æ–º—É HTML</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
