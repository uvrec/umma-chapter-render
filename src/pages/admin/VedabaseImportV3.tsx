// –¢–µ—Å—Ç–æ–≤–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Play } from "lucide-react";

// –í–±—É–¥–æ–≤–∞–Ω–∏–π –ø–∞—Ä—Å–µ—Ä (—Å–∫–æ–ø—ñ—é–π —Ü–µ –ø–æ—Ç—ñ–º –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª)
function extractVedabaseContent(html: string) {
  const result = {
    sanskrit: "",
    transliteration: "",
    synonyms: "",
    translation: "",
    commentary: "",
  };

  try {
    // –°–ê–ù–°–ö–†–ò–¢ - —à—É–∫–∞—î–º–æ Devanagari/Bengali
    const devanagariMatch = html.match(/[\u0900-\u097F‡•§‡••\s]+/g);
    const bengaliMatch = html.match(/[\u0980-\u09FF‡•§‡••\s]+/g);

    const allMatches = [...(devanagariMatch || []), ...(bengaliMatch || [])];
    const longest = allMatches
      .map((s) => s.trim())
      .filter((s) => s.length > 10)
      .sort((a, b) => b.length - a.length)[0];

    if (longest) {
      result.sanskrit = longest;
    }

    // –¢–†–ê–ù–°–õ–Ü–¢–ï–†–ê–¶–Ü–Ø - IAST –∑ –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫–æ—é
    const iastPattern = /\b[a-zA-ZƒÅƒ´≈´·πõ·πù·∏∑·∏πƒì≈ç·πÉ·∏•≈õ·π£·πá·π≠·∏ç√±·πÖ\s\-']+\b/g;
    const iastMatches = html.match(iastPattern);

    if (iastMatches) {
      const withDiacritics = iastMatches.filter(
        (text) => /[ƒÅƒ´≈´·πõ·πù·∏∑·∏πƒì≈ç·πÉ·∏•≈õ·π£·πá·π≠·∏ç√±·πÖ]/.test(text) && text.trim().split(/\s+/).length > 3,
      );

      if (withDiacritics.length > 0) {
        result.transliteration = withDiacritics.sort((a, b) => b.length - a.length)[0].trim();
      }
    }

    // –°–ò–ù–û–ù–Ü–ú–ò
    const synonymsMatch = html.match(/(?:SYNONYMS|Word for word)[:\s]*(.*?)(?=TRANSLATION|$)/is);
    if (synonymsMatch) {
      result.synonyms = synonymsMatch[1]
        .replace(/<[^>]+>/g, " ")
        .replace(/\s+/g, " ")
        .trim()
        .substring(0, 2000);
    }

    // –ü–ï–†–ï–ö–õ–ê–î
    const translationMatch = html.match(/TRANSLATION[:\s]*(.*?)(?=PURPORT|COMMENTARY|$)/is);
    if (translationMatch) {
      result.translation = translationMatch[1]
        .replace(/<[^>]+>/g, " ")
        .replace(/\s+/g, " ")
        .trim()
        .substring(0, 1000);
    }

    // –ö–û–ú–ï–ù–¢–ê–†
    const commentaryMatch = html.match(/(?:PURPORT|COMMENTARY)[:\s]*(.*?)$/is);
    if (commentaryMatch) {
      result.commentary = commentaryMatch[1]
        .replace(/<script[^>]*>.*?<\/script>/gis, "")
        .replace(/<style[^>]*>.*?<\/style>/gis, "")
        .replace(/<[^>]+>/g, " ")
        .replace(/\s+/g, " ")
        .trim()
        .substring(0, 10000);
    }
  } catch (error) {
    console.error("Parse error:", error);
  }

  return result;
}

export default function VedabaseImportV3() {
  const navigate = useNavigate();
  const [logs, setLogs] = useState<string[]>([]);
  const [isTesting, setIsTesting] = useState(false);
  const [parsedData, setParsedData] = useState<any>(null);

  const addLog = (msg: string) => {
    console.log(msg);
    setLogs((prev) => [...prev, `${new Date().toLocaleTimeString()}: ${msg}`]);
  };

  const testParser = async () => {
    setIsTesting(true);
    setLogs([]);
    setParsedData(null);

    const testUrl = "https://vedabase.io/en/library/bg/1/1/";

    addLog("üß™ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è HTML –∑ AllOrigins...");
    try {
      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(testUrl)}`;
      const response = await fetch(proxyUrl);
      const html = await response.text();

      addLog(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${html.length} —Å–∏–º–≤–æ–ª—ñ–≤`);

      addLog("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É...");
      const parsed = extractVedabaseContent(html);

      setParsedData(parsed);

      if (parsed.sanskrit) {
        addLog(`‚úÖ –°–∞–Ω—Å–∫—Ä–∏—Ç: "${parsed.sanskrit.substring(0, 50)}..."`);
      } else {
        addLog(`‚ö†Ô∏è –°–∞–Ω—Å–∫—Ä–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      }

      if (parsed.transliteration) {
        addLog(`‚úÖ –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è: "${parsed.transliteration.substring(0, 50)}..."`);
      } else {
        addLog(`‚ö†Ô∏è –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
      }

      if (parsed.synonyms) {
        addLog(`‚úÖ –°–∏–Ω–æ–Ω—ñ–º–∏: ${parsed.synonyms.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      } else {
        addLog(`‚ö†Ô∏è –°–∏–Ω–æ–Ω—ñ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ`);
      }

      if (parsed.translation) {
        addLog(`‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥: ${parsed.translation.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      } else {
        addLog(`‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
      }

      if (parsed.commentary) {
        addLog(`‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${parsed.commentary.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      } else {
        addLog(`‚ö†Ô∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
      }

      addLog("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    } catch (e) {
      addLog(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${e instanceof Error ? e.message : "unknown"}`);
    }

    setIsTesting(false);
  };

  return (
    <div className="min-h-screen bg-background p-8">
      <Button variant="ghost" onClick={() => navigate("/admin/dashboard")} className="mb-4">
        <ArrowLeft className="w-4 h-4 mr-2" />
        –ù–∞–∑–∞–¥
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ V3</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-muted-foreground">–¢–µ—Å—Ç—É—î –Ω–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä —è–∫–∏–π –≤–∏—Ç—è–≥—É—î —Å–∞–Ω—Å–∫—Ä–∏—Ç –∑ JavaScript</p>

          <Button onClick={testParser} disabled={isTesting} className="w-full">
            <Play className="w-4 h-4 mr-2" />
            {isTesting ? "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è..." : "–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä—Å–µ—Ä"}
          </Button>

          {logs.length > 0 && (
            <div className="bg-black text-green-400 p-4 rounded font-mono text-xs overflow-auto max-h-96">
              {logs.map((log, i) => (
                <div key={i}>{log}</div>
              ))}
            </div>
          )}

          {parsedData && (
            <div className="space-y-4 mt-6">
              <h3 className="font-semibold">–†–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ –¥–∞–Ω—ñ:</h3>

              {parsedData.sanskrit && (
                <div className="bg-muted p-3 rounded">
                  <div className="text-xs font-bold mb-1">–°–ê–ù–°–ö–†–ò–¢:</div>
                  <div className="font-sanskrit text-lg">{parsedData.sanskrit}</div>
                </div>
              )}

              {parsedData.transliteration && (
                <div className="bg-muted p-3 rounded">
                  <div className="text-xs font-bold mb-1">–¢–†–ê–ù–°–õ–Ü–¢–ï–†–ê–¶–Ü–Ø:</div>
                  <div className="italic">{parsedData.transliteration}</div>
                </div>
              )}

              {parsedData.synonyms && (
                <div className="bg-muted p-3 rounded">
                  <div className="text-xs font-bold mb-1">–°–ò–ù–û–ù–Ü–ú–ò:</div>
                  <div className="text-sm">{parsedData.synonyms.substring(0, 200)}...</div>
                </div>
              )}

              {parsedData.translation && (
                <div className="bg-muted p-3 rounded">
                  <div className="text-xs font-bold mb-1">–ü–ï–†–ï–ö–õ–ê–î:</div>
                  <div>{parsedData.translation}</div>
                </div>
              )}

              {parsedData.commentary && (
                <div className="bg-muted p-3 rounded">
                  <div className="text-xs font-bold mb-1">–ö–û–ú–ï–ù–¢–ê–†:</div>
                  <div className="text-sm">{parsedData.commentary.substring(0, 300)}...</div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
