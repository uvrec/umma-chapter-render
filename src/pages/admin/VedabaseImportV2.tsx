import { useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { Loader2, Download, AlertCircle, ArrowLeft } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { VEDABASE_BOOKS, getBookConfig, buildVedabaseUrl, getOurSlug } from "@/utils/Vedabase-books";
import { Badge } from "@/components/ui/badge";

/**
 * –í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —ñ–º–ø–æ—Ä—Ç—É –∑ Vedabase.io —Ç–∞ Gitabase.com
 *
 * –ï—Ç–∞–ø–∏:
 * 1. –Ü–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑ Vedabase (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞)
 * 2. –û–±—Ä–æ–±–∫–∞ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –≤—ñ—Ä—à—ñ–≤
 * 3. –î–æ–¥–∞–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ Gitabase
 */
export default function VedabaseImportV2() {
  const navigate = useNavigate();
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentStep, setCurrentStep] = useState<string>("");
  const [selectedBook, setSelectedBook] = useState("cc"); // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º Chaitanya-charitamrita
  const [cantoNumber, setCantoNumber] = useState("1");
  const [chapterNumber, setChapterNumber] = useState("1");
  const [manualMode, setManualMode] = useState(false);
  const [manualFrom, setManualFrom] = useState("1");
  const [manualTo, setManualTo] = useState("10");

  const [stats, setStats] = useState<{
    total: number;
    imported: number;
    skipped: number;
    grouped: string[];
    errors: string[];
  } | null>(null);

  const bookConfig = useMemo(() => getBookConfig(selectedBook)!, [selectedBook]);
  const requiresCanto = !!bookConfig?.has_cantos;
  // –ü–æ—Ç—Ä—ñ–±–µ–Ω –Ω–æ–º–µ—Ä –≥–ª–∞–≤–∏ –ª–∏—à–µ —è–∫—â–æ —É —à–∞–±–ª–æ–Ω—ñ —î {chapter} –∞–±–æ {lila}
  const requiresChapter = useMemo(
    () => !!bookConfig?.url_pattern?.includes("{chapter}") || !!bookConfig?.url_pattern?.includes("{lila}"),
    [bookConfig],
  );

  /**
   * –ö—Ä–æ–∫ 1: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –≤—ñ—Ä—à—ñ–≤
   * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≥–ª–∞–≤–∏, —Ç–∞–∫ —ñ —ñ–Ω–¥–µ–∫—Å–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–Ω–∏–≥–∏ (ISO/BS/NOI)
   */
  const scanChapterVerses = async (baseUrl: string): Promise<string[]> => {
    setCurrentStep("–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≥–ª–∞–≤–∏...");

    try {
      const response = await fetch(baseUrl, { mode: "cors" });
      const html = await response.text();

      // –ü–∞—Ä—Å–∏–º–æ HTML –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –≤—ñ—Ä—à—ñ
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");

      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø–æ—Å–∏–ª–∞–Ω—å: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π href, —à—É–∫–∞—î–º–æ –∫—ñ–Ω—Ü–µ–≤–∏–π —á–∏—Å–ª–æ–≤–∏–π —Å–µ–≥–º–µ–Ω—Ç
      const anchors = Array.from(doc.querySelectorAll<HTMLAnchorElement>("a[href]"));
      const verseLinks = anchors
        .map((a) => a.href || "")
        .map((href) => {
          try {
            // –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –ª—ñ–Ω–∫–∏, —â–æ –≤–µ–¥—É—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–Ω–∏–≥–∏ (–Ω–∞ –±—É–¥—å-—è–∫—ñ–π –º–æ–≤—ñ —Å–∞–π—Ç—É)
            // –ø—Ä–∏–∫–ª–∞–¥–∏: https://vedabase.io/en/library/sb/1/1/2/ ‚Üí 2 ; https://vedabase.io/en/library/bs/5/ ‚Üí 5 ; relative —Ç–µ–∂ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É a.href
            const path = new URL(href).pathname;
            if (!path.includes(`/library/${bookConfig.slug}/`)) return null;
            const m = path.match(/\/(\d+(?:-\d+)?)\/?$/);
            return m ? m[1] : null;
          } catch {
            return null;
          }
        })
        .filter((v): v is string => !!v);

      // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤—ñ—Ä—à—ñ –≤ –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–∏
      const uniqueVerses = Array.from(new Set(verseLinks));

      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ—Ä—à—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: ${uniqueVerses.length}`, uniqueVerses);
      return uniqueVerses;
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≥–ª–∞–≤–∏:", error);
      return [];
    }
  };

  /**
   * –ö—Ä–æ–∫ 2: –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ –≤—ñ—Ä—à–∞ –∑ Vedabase
   */
  const importVerseFromVedabase = async (
    verseNumber: string,
    verseUrl: string,
    chapterId: string,
  ): Promise<{ success: boolean; isGrouped: boolean; error?: string }> => {
    try {
      setCurrentStep(`–Ü–º–ø–æ—Ä—Ç –≤—ñ—Ä—à–∞ ${verseNumber}...`);

      const response = await fetch(verseUrl);
      if (!response.ok) {
        return { success: false, isGrouped: false, error: `HTTP ${response.status}` };
      }

      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–π –≤—ñ—Ä—à
      const isGrouped = verseNumber.includes("-");

      // –í–∏—Ç—è–≥—É—î–º–æ –±–ª–æ–∫–∏
      const sanskrit = doc.querySelector(".verse-text")?.textContent?.trim() || "";
      const transliteration = doc.querySelector(".transliteration")?.textContent?.trim() || "";
      const synonyms = doc.querySelector(".synonyms")?.textContent?.trim() || "";
      const translation = doc.querySelector(".translation")?.textContent?.trim() || "";
      const purport = doc.querySelector(".purport")?.innerHTML?.trim() || "";

      if (isGrouped) {
        console.log(`‚ö†Ô∏è –í—ñ—Ä—à ${verseNumber} –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è`);
        return { success: true, isGrouped: true };
      }

      // –§–æ—Ä–º—É—î–º–æ display_blocks –Ω–∞ –±–∞–∑—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      const displayBlocks = {
        sanskrit: !!sanskrit && sanskrit.trim().length > 0,
        transliteration: !!transliteration && transliteration.trim().length > 0,
        synonyms: !!synonyms && synonyms.trim().length > 0,
        translation: !!translation && translation.trim().length > 0,
        commentary: !!purport && purport.trim().length > 0,
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–∑ display_blocks
      const { error: insertError } = await supabase.from("verses").insert({
        chapter_id: chapterId,
        verse_number: verseNumber,
        sanskrit: sanskrit,
        transliteration: transliteration,
        synonyms_en: synonyms,
        translation_en: translation,
        commentary_en: purport,
        display_blocks: displayBlocks,
      });

      if (insertError) {
        // –Ø–∫—â–æ –≤—ñ—Ä—à –≤–∂–µ —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ
        const { error: updateError } = await supabase
          .from("verses")
          .update({
            sanskrit: sanskrit,
            transliteration: transliteration,
            synonyms_en: synonyms,
            translation_en: translation,
            commentary_en: purport,
            display_blocks: displayBlocks,
          })
          .eq("chapter_id", chapterId)
          .eq("verse_number", verseNumber);

        if (updateError) {
          return { success: false, isGrouped: false, error: updateError.message };
        }
      }

      return { success: true, isGrouped: false };
    } catch (error) {
      return {
        success: false,
        isGrouped: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  };

  /**
   * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É
   */
  const startImport = async () => {
    setIsProcessing(true);
    setStats({ total: 0, imported: 0, skipped: 0, grouped: [], errors: [] });

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ–±—Ä–∞–Ω–æ—ó –∫–Ω–∏–≥–∏ (vedabase slug)
      if (!bookConfig) {
        toast.error("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–Ω–∏–≥–∞");
        return;
      }

      // –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–Ω–∏–≥–∏ –≤ –ë–î –∑–∞ vedabase_slug
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const { data: dbBooks, error: dbBookError } = await (supabase as any)
        .from("books")
        .select("id, slug, has_cantos")
        .eq("vedabase_slug", selectedBook)
        .limit(1);

      let dbBook = dbBooks?.[0] ?? null;

      if (dbBookError) {
        console.warn("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–Ω–∏–≥–∏ –∑–∞ vedabase_slug:", dbBookError.message);
      }

      // –Ø–∫—â–æ –∫–Ω–∏–≥–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      if (!dbBook) {
        console.log(`üìö –ö–Ω–∏–≥–∞ –∑ vedabase_slug="${selectedBook}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...`);
        
        const ourSlug = getOurSlug(bookConfig) || selectedBook;
        const bookTitle = bookConfig.name_ua || bookConfig.name_en || selectedBook.toUpperCase();
        
        const { data: newBook, error: createBookError } = await supabase
          .from("books")
          .insert({
            slug: ourSlug,
            vedabase_slug: selectedBook,
            title_ua: bookConfig.name_ua || bookTitle,
            title_en: bookConfig.name_en || bookTitle,
            has_cantos: bookConfig.has_cantos || false,
          })
          .select("id, slug, has_cantos")
          .single();
        
        if (createBookError) {
          toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–∏–≥—É: ${createBookError.message}`);
          return;
        }
        
        dbBook = newBook;
        toast.success(`–ö–Ω–∏–≥–∞ "${bookTitle}" —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
      }

      // –Ø–∫—â–æ –∫–Ω–∏–≥–∞ —ñ—Å–Ω—É—î —ñ –º–∞—î –ü—ñ—Å–Ω—ñ/–ª—ñ–ª–∏, –º–∏ –∑–º–æ–∂–µ–º–æ —Ç–æ—á–Ω—ñ—à–µ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –≥–ª–∞–≤—É
      // –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL –¥–ª—è –≥–ª–∞–≤–∏
      const chapterBaseUrl = buildVedabaseUrl(bookConfig, {
        canto: bookConfig.has_cantos ? cantoNumber : undefined,
        chapter: requiresChapter ? chapterNumber : undefined,
      });

      console.log("–ë–∞–∑–æ–≤–∏–π URL:", chapterBaseUrl);

      // –û—Ç—Ä–∏–º—É—î–º–æ ID –≥–ª–∞–≤–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–Ω–∏–≥–∏ (—ñ –ü—ñ—Å–Ω—ñ/–ª—ñ–ª–∏ —è–∫—â–æ —î)
      const chapterNumberInt = parseInt(chapterNumber);

      let cantoId: string | null = null;
      if (bookConfig.has_cantos && dbBook) {
        const cantoNumberInt = parseInt(cantoNumber);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const { data: cantoRows, error: cantoErr } = await (supabase as any)
          .from("cantos")
          .select("id, canto_number, book_id")
          .eq("book_id", dbBook.id)
          .eq("canto_number", cantoNumberInt)
          .limit(1);
        
        let canto = cantoRows?.[0] ?? null;
        
        // –Ø–∫—â–æ –ü—ñ—Å–Ω—è –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        if (!canto) {
          console.log(`üéµ –ü—ñ—Å–Ω—è/–õ—ñ–ª–∞ ${cantoNumberInt} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...`);
          
          const { data: newCanto, error: createCantoError } = await supabase
            .from("cantos")
            .insert({
              book_id: dbBook.id,
              canto_number: cantoNumberInt,
              title_ua: `–ü—ñ—Å–Ω—è ${cantoNumberInt}`,
              title_en: `Canto ${cantoNumberInt}`,
            })
            .select("id, canto_number, book_id")
            .single();
          
          if (createCantoError) {
            toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ü—ñ—Å–Ω—é: ${createCantoError.message}`);
            return;
          }
          
          canto = newCanto;
          toast.success(`–ü—ñ—Å–Ω—è ${cantoNumberInt} —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
        }
        
        cantoId = canto.id;
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let chapterQuery: any = (supabase as any)
        .from("chapters")
        .select("id, chapter_number, book_id, canto_id")
        .eq("chapter_number", chapterNumberInt)
        .limit(1);

      if (dbBook?.id) {
        chapterQuery = chapterQuery.eq("book_id", dbBook.id);
      }
      if (bookConfig.has_cantos && cantoId) {
        chapterQuery = chapterQuery.eq("canto_id", cantoId);
      }

      const { data: chapterRows, error: chapterErr } = await chapterQuery;

      let chapter = chapterRows?.[0] ?? null;
      
      // –Ø–∫—â–æ –≥–ª–∞–≤–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      if (!chapter && dbBook) {
        console.log(`üìñ –ì–ª–∞–≤–∞ ${chapterNumberInt} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...`);
        
        const chapterPayload: any = {
          chapter_number: chapterNumberInt,
          chapter_type: "verses",
          title_ua: `–ì–ª–∞–≤–∞ ${chapterNumberInt}`,
          title_en: `Chapter ${chapterNumberInt}`,
        };
        
        if (cantoId) {
          chapterPayload.canto_id = cantoId;
        } else {
          chapterPayload.book_id = dbBook.id;
        }
        
        const { data: newChapter, error: createChapterError } = await supabase
          .from("chapters")
          .insert(chapterPayload)
          .select("id, chapter_number, book_id, canto_id")
          .single();
        
        if (createChapterError) {
          toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–∞–≤—É: ${createChapterError.message}`);
          return;
        }
        
        chapter = newChapter;
        toast.success(`–ì–ª–∞–≤–∞ ${chapterNumberInt} —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
      }
      
      if (!chapter) {
        toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–∞–≤—É.");
        return;
      }

      // –ö—Ä–æ–∫ 1: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ—Ä—à—ñ–≤ –∞–±–æ —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º
      let verses: string[] = [];
      if (manualMode) {
        const from = Math.max(1, parseInt(manualFrom || "1", 10));
        const to = Math.max(from, parseInt(manualTo || String(from), 10));
        verses = Array.from({ length: to - from + 1 }, (_, i) => String(from + i));
      } else {
        verses = await scanChapterVerses(chapterBaseUrl);
      }

      if (verses.length === 0) {
        toast.error(
          "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ—Ä—à—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ CORS –∞–±–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—É –≤—ñ—Ä—à—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω.",
        );
        return;
      }

      setStats({ total: verses.length, imported: 0, skipped: 0, grouped: [], errors: [] });

      let imported = 0;
      let skipped = 0;
      const grouped: string[] = [];
      const errors: string[] = [];

      // –ö—Ä–æ–∫ 2: –Ü–º–ø–æ—Ä—Ç –∫–æ–∂–Ω–æ–≥–æ –≤—ñ—Ä—à–∞
      for (const verseNumber of verses) {
        // –§–æ—Ä–º—É—î–º–æ URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ—Ä—à–∞
        const verseUrl = buildVedabaseUrl(bookConfig, {
          canto: bookConfig.has_cantos ? cantoNumber : undefined,
          chapter: requiresChapter ? chapterNumber : undefined,
          verse: verseNumber,
        });

        const result = await importVerseFromVedabase(verseNumber, verseUrl, chapter.id);

        if (result.success) {
          if (result.isGrouped) {
            grouped.push(verseNumber);
          } else {
            imported++;
          }
        } else {
          errors.push(`${verseNumber}: ${result.error}`);
          skipped++;
        }

        setStats({ total: verses.length, imported, skipped, grouped, errors });

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 500));
      }

      toast.success(`–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: ${imported}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É");
    } finally {
      setIsProcessing(false);
      setCurrentStep("");
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={() => navigate("/admin/dashboard")}>
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-2xl font-bold">Vedabase Import v2</h1>
              <p className="text-sm text-muted-foreground">–†–æ–∑—É–º–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑ –æ–±—Ä–æ–±–∫–æ—é –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –≤—ñ—Ä—à—ñ–≤ —Ç–∞ –ø–æ–µ—Ç–∞–ø–Ω–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö</p>
            </div>
          </div>
        </div>
      </header>
      
      <div className="container mx-auto px-4 py-8">
      <Card>
        <CardHeader>
          <CardTitle>–í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑ Vedabase.io</CardTitle>
          <CardDescription>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —ñ–º–ø–æ—Ä—Ç –≤—ñ—Ä—à—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="vedabase" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="vedabase">
                <Download className="w-4 h-4 mr-2" />
                –ï—Ç–∞–ø 1: Vedabase (EN)
              </TabsTrigger>
              <TabsTrigger value="gitabase" disabled>
                –ï—Ç–∞–ø 2: Gitabase (UA)
              </TabsTrigger>
            </TabsList>

            <TabsContent value="vedabase" className="space-y-6">
              {/* –ü—ñ–¥–∫–∞–∑–∫–∞ –∑ –ø—Ä—è–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ CORS-–Ω–æ—Ç–∞ */}
              <div className="p-3 rounded-lg border bg-muted/30 text-sm">
                <div className="flex flex-wrap items-center gap-2">
                  <span className="text-muted-foreground">URL –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</span>
                  <a
                    className="underline break-all"
                    href={buildVedabaseUrl(bookConfig, {
                      canto: requiresCanto ? cantoNumber : undefined,
                      chapter: requiresChapter ? chapterNumber : undefined,
                    })}
                    target="_blank"
                    rel="noreferrer"
                  >
                    {buildVedabaseUrl(bookConfig, {
                      canto: requiresCanto ? cantoNumber : undefined,
                      chapter: requiresChapter ? chapterNumber : undefined,
                    })}
                  </a>
                </div>
                <div className="mt-1 text-xs text-muted-foreground">
                  –Ø–∫—â–æ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü–æ—á–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç" –≤—ñ—Ä—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —á–µ—Ä–µ–∑ CORS –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å
                  —Å–ø–∏—Å–∫—É –≤—ñ—Ä—à—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –£ —Ç–∞–∫–æ–º—É —Ä–∞–∑—ñ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ä–µ–∂–∏–º–æ–º "–†—É—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω" –Ω–∏–∂—á–µ.
                </div>
              </div>
              {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫ –ø—Ä–æ –º–∞–ø–ø—ñ–Ω–≥ Vedabase ‚Üí –ù–∞—à–∞ –ë–î */}
              <div className="p-4 rounded-lg border bg-card text-card-foreground shadow-soft">
                <div className="flex flex-col gap-2">
                  <div className="text-sm text-muted-foreground">–ú–∞–ø–ø—ñ–Ω–≥ –∫–Ω–∏–≥–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</div>
                  <div className="flex flex-wrap items-center gap-2">
                    <Badge variant="outline">Vedabase: {selectedBook.toUpperCase()}</Badge>
                    {getBookConfig(selectedBook)?.our_slug && (
                      <>
                        <span className="text-muted-foreground">‚Üí</span>
                        <Badge variant="secondary">–ù–∞—à–∞ –ë–î: {getOurSlug(getBookConfig(selectedBook)!)}</Badge>
                      </>
                    )}
                    {getBookConfig(selectedBook)?.structure_type && (
                      <Badge>–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {getBookConfig(selectedBook)!.structure_type}</Badge>
                    )}
                    {getBookConfig(selectedBook)?.has_cantos && <Badge variant="outline">–ú–∞—î –ø—ñ—Å–Ω—ñ/–ª—ñ–ª–∏</Badge>}
                    {!requiresChapter && <Badge variant="outline">–ë–µ–∑ –≥–ª–∞–≤ (–ª–∏—à–µ –≤—ñ—Ä—à—ñ)</Badge>}
                  </div>
                </div>
              </div>
              <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
                  ‚ÑπÔ∏è –ï—Ç–∞–ø 1: –ë–∞–∑–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –∑ Vedabase
                </h4>
                <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                  <li>‚Ä¢ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ—Ä—à—ñ–≤ –≥–ª–∞–≤–∏ (–≤–∫–ª—é—á–Ω–æ –∑—ñ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–º–∏)</li>
                  <li>‚Ä¢ –Ü–º–ø–æ—Ä—Ç –æ—Ä–∏–≥—ñ–Ω–∞–ª—É, —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó, —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤</li>
                  <li>‚Ä¢ –Ü–º–ø–æ—Ä—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è</li>
                  <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—Ä–æ–ø—É—Å–∫ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –≤—ñ—Ä—à—ñ–≤ (65-66, 69-70 —Ç–æ—â–æ)</li>
                </ul>
              </div>

              <div className="grid gap-4 md:grid-cols-3">
                {/* Book select */}
                <div className="space-y-2">
                  <Label htmlFor="bookSelect">–ö–Ω–∏–≥–∞</Label>
                  <Select value={selectedBook} onValueChange={setSelectedBook}>
                    <SelectTrigger id="bookSelect">
                      <SelectValue placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É" />
                    </SelectTrigger>
                    <SelectContent>
                      {VEDABASE_BOOKS.map((book) => (
                        <SelectItem key={book.slug} value={book.slug}>
                          <div>
                            <div className="font-medium">{book.slug.toUpperCase()}</div>
                            <div className="text-xs text-muted-foreground">{book.name_ua}</div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Canto input if needed */}
                {requiresCanto && (
                  <div className="space-y-2">
                    <Label htmlFor="cantoNumber">–ù–æ–º–µ—Ä –ø—ñ—Å–Ω—ñ/–ª—ñ–ª–∏</Label>
                    <Input
                      id="cantoNumber"
                      value={cantoNumber}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCantoNumber(e.target.value)}
                      placeholder="1"
                    />
                    <p className="text-xs text-muted-foreground">
                      {selectedBook === "cc" ? "1 ‚Äî –ê–¥—ñ, 2 ‚Äî –ú–∞–¥—Ö º—è, 3 ‚Äî –ê–Ω—Ç—å—è" : "–ù–æ–º–µ—Ä –ü—ñ—Å–Ω—ñ"}
                    </p>
                  </div>
                )}

                {/* Chapter input if required */}
                {requiresChapter && (
                  <div className="space-y-2">
                    <Label htmlFor="chapterNumber">–ù–æ–º–µ—Ä –≥–ª–∞–≤–∏</Label>
                    <Input
                      id="chapterNumber"
                      value={chapterNumber}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setChapterNumber(e.target.value)}
                      placeholder="1"
                    />
                  </div>
                )}
              </div>

              {/* –†—É—á–Ω–∏–π —Ä–µ–∂–∏–º (–∫–æ–ª–∏ —Å–∫–∞–Ω–µ—Ä –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ñ—Ä—à—ñ –∞–±–æ CORS) */}
              <div className="rounded-lg border p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <div className="font-medium">–†—É—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω (fallback)</div>
                  <div className="text-xs text-muted-foreground">–ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è ISO/BS/NOI –∞–±–æ –ø—Ä–∏ CORS</div>
                </div>
                <div className="flex items-center gap-3 flex-wrap">
                  <label className="text-sm text-muted-foreground" htmlFor="from">
                    –í—ñ–¥
                  </label>
                  <Input
                    id="from"
                    className="w-24"
                    value={manualFrom}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setManualFrom(e.target.value)}
                  />
                  <label className="text-sm text-muted-foreground" htmlFor="to">
                    –î–æ
                  </label>
                  <Input
                    id="to"
                    className="w-24"
                    value={manualTo}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setManualTo(e.target.value)}
                  />
                  <div className="flex items-center gap-2 ml-2">
                    <input
                      id="manualMode"
                      type="checkbox"
                      checked={manualMode}
                      onChange={(e) => setManualMode(e.currentTarget.checked)}
                    />
                    <label htmlFor="manualMode" className="text-sm">
                      –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—É—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
                    </label>
                  </div>
                </div>
                <div className="text-xs text-muted-foreground">
                  –ü—ñ–¥–∫–∞–∑–∫–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ ‚Äî ISO (1‚Äì18), NOI (1‚Äì11), BS (1‚Äì62). –î–ª—è BG/SB/CC –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∫–∞–Ω–µ—Ä
                  –ø–æ –≥–ª–∞–≤–∞—Ö/–ª—ñ–ª–∞—Ö.
                </div>
              </div>

              <Button onClick={startImport} disabled={isProcessing} className="w-full" size="lg">
                {isProcessing && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
                {isProcessing ? currentStep : "–ü–æ—á–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç"}
              </Button>

              {stats && (
                <div className="space-y-4">
                  <div className="bg-primary/10 p-4 rounded-lg">
                    <h3 className="font-semibold mb-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <div className="text-muted-foreground">–í—Å—å–æ–≥–æ –≤—ñ—Ä—à—ñ–≤</div>
                        <div className="text-2xl font-bold">{stats.total}</div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ</div>
                        <div className="text-2xl font-bold text-green-600">{stats.imported}</div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">–ü—Ä–æ–ø—É—â–µ–Ω–æ</div>
                        <div className="text-2xl font-bold text-yellow-600">{stats.skipped}</div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">–ó–≥—Ä—É–ø–æ–≤–∞–Ω—ñ</div>
                        <div className="text-2xl font-bold text-blue-600">{stats.grouped.length}</div>
                      </div>
                    </div>
                  </div>

                  {stats.grouped.length > 0 && (
                    <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800">
                      <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2 flex items-center">
                        <AlertCircle className="w-4 h-4 mr-2" />
                        –ó–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –≤—ñ—Ä—à—ñ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è):
                      </h4>
                      <div className="text-sm text-yellow-700 dark:text-yellow-300">{stats.grouped.join(", ")}</div>
                    </div>
                  )}

                  {stats.errors.length > 0 && (
                    <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg border border-red-200 dark:border-red-800">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-2">–ü–æ–º–∏–ª–∫–∏:</h4>
                      <ul className="text-sm text-red-700 dark:text-red-300 space-y-1">
                        {stats.errors.map((error, i) => (
                          <li key={i}>‚Ä¢ {error}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </TabsContent>

            <TabsContent value="gitabase">
              <div className="text-center py-8 text-muted-foreground">
                –ï—Ç–∞–ø 2 –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –∑ Vedabase
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
      </div>
    </div>
  );
}
