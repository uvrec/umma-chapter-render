import { useState, useEffect } from "react";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useLanguage } from "@/contexts/LanguageContext";
import { convertIASTtoUkrainian, devanagariToIAST, bengaliToIAST } from "@/utils/textNormalizer";
import { normalizeTransliteration } from "@/utils/text/translitNormalize";
import { toast } from "sonner";
import { Trash2, Download } from "lucide-react";

type TranslitMode = "iast" | "devanagari" | "bengali";
type TextType = "shloka" | "purport";

/**
 * ‚úÖ –ß–ò–°–¢–ò–ô –¢–†–ê–ù–°–õ–Ü–¢–ï–†–ê–¢–û–† (–±–µ–∑ –∑–∞–π–≤–∏—Ö –±–ª–æ–∫—ñ–≤)
 * - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ƒ±ÃÑ –∑–∞–º—ñ—Å—Ç—å ”£
 * - Live Preview
 * - LocalStorage
 * - –ë–µ–∑ –±–ª–æ–∫—É "–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è"
 */
export default function TransliterationTool() {
  const { language, t } = useLanguage();

  const [inputText, setInputText] = useState("");
  const [outputText, setOutputText] = useState("");
  const [mode, setMode] = useState<TranslitMode>("iast");
  const [textType, setTextType] = useState<TextType>("shloka");

  /**
   * –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
   */
  const applyCapitalization = (text: string, type: TextType): string => {
    if (type === "shloka") {
      return text.toLowerCase();
    } else {
      let result = text.charAt(0).toUpperCase() + text.slice(1);
      result = result.replace(/\.\s+([–∞-—è“ë—î—ñ—óa-z–∞ÃÑ”Øƒ±ÃÑ])/g, (match, letter) => {
        return ". " + letter.toUpperCase();
      });
      return result;
    }
  };

  /**
   * –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è
   */
  const performTransliteration = (input: string): string => {
    if (!input.trim()) return "";

    let intermediate = input;

    if (mode === "devanagari") {
      intermediate = devanagariToIAST(input);
    } else if (mode === "bengali") {
      intermediate = bengaliToIAST(input);
    }

    let result = convertIASTtoUkrainian(intermediate);
    result = normalizeTransliteration(result);
    result = applyCapitalization(result, textType);

    return result;
  };

  /**
   * üî• LIVE PREVIEW –∑ debounce
   */
  useEffect(() => {
    const timer = setTimeout(() => {
      const result = performTransliteration(inputText);
      setOutputText(result);
    }, 500);

    return () => clearTimeout(timer);
  }, [inputText, mode, textType]);

  /**
   * üíæ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø
   */
  useEffect(() => {
    localStorage.setItem("translit_input", inputText);
    localStorage.setItem("translit_mode", mode);
    localStorage.setItem("translit_type", textType);
  }, [inputText, mode, textType]);

  /**
   * üîÑ –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø
   */
  useEffect(() => {
    const savedInput = localStorage.getItem("translit_input");
    const savedMode = localStorage.getItem("translit_mode") as TranslitMode;
    const savedType = localStorage.getItem("translit_type") as TextType;

    if (savedInput) setInputText(savedInput);
    if (savedMode) setMode(savedMode);
    if (savedType) setTextType(savedType);
  }, []);

  /**
   * üßπ –û–ß–ò–°–¢–ò–¢–ò
   */
  const handleClear = () => {
    setInputText("");
    setOutputText("");
    localStorage.removeItem("translit_input");
    toast.success(t("–û—á–∏—â–µ–Ω–æ", "Cleared"));
  };

  /**
   * üìã –ö–û–ü–Ü–Æ–í–ê–¢–ò
   */
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success(t("–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!", "Copied!"));
    } catch (err) {
      toast.error(t("–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", "Copy failed"));
    }
  };

  /**
   * üì• –ï–ö–°–ü–û–†–¢
   */
  const exportToFile = () => {
    if (!outputText) {
      toast.error(t("–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", "No text to export"));
      return;
    }

    const blob = new Blob([outputText], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `transliteration_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast.success(t("–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "File downloaded"));
  };

  /**
   * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
   */
  const inputWords = inputText.trim() ? inputText.split(/\s+/).filter(Boolean).length : 0;
  const outputWords = outputText.trim() ? outputText.split(/\s+/).filter(Boolean).length : 0;

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <main className="container mx-auto px-4 py-8 max-w-6xl">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-primary mb-2">
            {t("–¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ç–æ—Ä —Å–∞–Ω—Å–∫—Ä–∏—Ç—É", "Sanskrit Transliterator")}
          </h1>
          <p className="text-muted-foreground">
            {t("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∫–∏—Ä–∏–ª–∏—Ü—é –∑ –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫–æ—é", "Convert to Ukrainian Cyrillic with diacritics")}
          </p>
        </div>

        {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
        <Card className="p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="mode">{t("–†–µ–∂–∏–º", "Mode")}</Label>
              <Select value={mode} onValueChange={(v) => setMode(v as TranslitMode)}>
                <SelectTrigger id="mode">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="iast">{t("–õ–∞—Ç–∏–Ω–∏—Ü—è (IAST) ‚Üí –ö–∏—Ä–∏–ª–∏—Ü—è", "Latin (IAST) ‚Üí Cyrillic")}</SelectItem>
                  <SelectItem value="devanagari">{t("–î–µ–≤–∞–Ω–∞–≥–∞—Ä—ñ ‚Üí –ö–∏—Ä–∏–ª–∏—Ü—è", "Devanagari ‚Üí Cyrillic")}</SelectItem>
                  <SelectItem value="bengali">{t("–ë–µ–Ω–≥–∞–ª—ñ ‚Üí –ö–∏—Ä–∏–ª–∏—Ü—è", "Bengali ‚Üí Cyrillic")}</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="textType">{t("–¢–∏–ø —Ç–µ–∫—Å—Ç—É", "Text type")}</Label>
              <Select value={textType} onValueChange={(v) => setTextType(v as TextType)}>
                <SelectTrigger id="textType">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="shloka">{t("–®–ª–æ–∫–∞ (–±–µ–∑ –≤–µ–ª–∏–∫–∏—Ö)", "Shloka (no capitals)")}</SelectItem>
                  <SelectItem value="purport">
                    {t("–ü–æ—è—Å–Ω–µ–Ω–Ω—è (–≤–µ–ª–∏–∫–∞ –ø—ñ—Å–ª—è –∫—Ä–∞–ø–∫–∏)", "Purport (capitals after period)")}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Card className="p-4 mb-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-primary">{inputText.length}</div>
              <div className="text-xs text-muted-foreground">{t("–°–∏–º–≤–æ–ª—ñ–≤ –≤–≤–µ–¥–µ–Ω–æ", "Input chars")}</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-primary">{inputWords}</div>
              <div className="text-xs text-muted-foreground">{t("–°–ª—ñ–≤ –≤–≤–µ–¥–µ–Ω–æ", "Input words")}</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">{outputText.length}</div>
              <div className="text-xs text-muted-foreground">{t("–°–∏–º–≤–æ–ª—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "Output chars")}</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">{outputWords}</div>
              <div className="text-xs text-muted-foreground">{t("–°–ª—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "Output words")}</div>
            </div>
          </div>
        </Card>

        {/* –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card className="p-4 space-y-3">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">{t("–í—Ö—ñ–¥", "Input")}</h2>
              <Button variant="ghost" size="sm" onClick={handleClear}>
                <Trash2 className="w-4 h-4 mr-2" />
                {t("–û—á–∏—Å—Ç–∏—Ç–∏", "Clear")}
              </Button>
            </div>
            <Textarea
              rows={18}
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder={
                mode === "iast"
                  ? "k·πõ·π£·πáa mahƒÅprabhu\nbhagavad-gƒ´tƒÅ"
                  : mode === "devanagari"
                    ? "‡•ê ‡§®‡§Æ‡•ã ‡§≠‡§ó‡§µ‡§§‡•á ‡§µ‡§æ‡§∏‡•Å‡§¶‡•á‡§µ‡§æ‡§Ø"
                    : "‡¶¨‡¶®‡ßç‡¶¶‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÇ‡¶®‡ßç ‡¶à‡¶∂‡¶≠‡¶ï‡ßç‡¶§‡¶æ‡¶®‡ßç"
              }
              className="font-mono resize-none"
            />
          </Card>

          <Card className="p-4 space-y-3">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">{t("–†–µ–∑—É–ª—å—Ç–∞—Ç", "Result")}</h2>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={() => copyToClipboard(outputText)} disabled={!outputText}>
                  {t("–ö–æ–ø—ñ—é–≤–∞—Ç–∏", "Copy")}
                </Button>
                <Button variant="outline" size="sm" onClick={exportToFile} disabled={!outputText}>
                  <Download className="w-4 h-4 mr-2" />
                  {t("–ï–∫—Å–ø–æ—Ä—Ç", "Export")}
                </Button>
              </div>
            </div>
            <Textarea
              rows={18}
              value={outputText}
              readOnly
              placeholder={t("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑'—è–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...", "Result appears automatically...")}
              className="font-sans resize-none bg-muted/30"
            />
          </Card>
        </div>

        {/* –ü—Ä–∏–∫–ª–∞–¥–∏ */}
        <Card className="mt-8 p-6 bg-muted/50">
          <h3 className="font-semibold mb-4">{t("–ü—Ä–∏–∫–ª–∞–¥–∏:", "Examples:")}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="space-y-2">
              <div className="flex justify-between border-b pb-2">
                <span className="font-mono text-muted-foreground">k·πõ·π£·πáa</span>
                <span className="font-semibold">‚Üí</span>
                <span>–∫—ÄÃ£—à–ΩÃ£–∞</span>
              </div>
              <div className="flex justify-between border-b pb-2">
                <span className="font-mono text-muted-foreground">mahƒÅprabhu</span>
                <span className="font-semibold">‚Üí</span>
                <span>–º–∞—Ö–∞ÃÑ–ø—Ä–∞–±–≥—É</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between border-b pb-2">
                <span className="font-mono text-muted-foreground">bhagavad-gƒ´tƒÅ</span>
                <span className="font-semibold">‚Üí</span>
                <span>–±–≥–∞“ë–∞–≤–∞–¥-“ëƒ±ÃÑ—Ç–∞ÃÑ</span>
              </div>
              <div className="flex justify-between border-b pb-2">
                <span className="font-mono text-muted-foreground">≈õrƒ´-k·πõ·π£·πáa</span>
                <span className="font-semibold">‚Üí</span>
                <span>—àÃÅ—Äƒ±ÃÑ-–∫—ÄÃ£—à–ΩÃ£–∞</span>
              </div>
            </div>
          </div>
        </Card>
      </main>
      <Footer />
    </div>
  );
}
