// src/utils/import/ensure/canto.ts
import { supabase } from "@/integrations/supabase/client";

export type CantoData = {
  title_ua: string;
  title_en: string;
  description_ua?: string;
  description_en?: string;
};

/**
 * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –ø—ñ—Å–Ω—é (canto) –¥–ª—è –∫–Ω–∏–≥–∏
 * @param bookId UUID –∫–Ω–∏–≥–∏
 * @param cantoNumber –ù–æ–º–µ—Ä –ø—ñ—Å–Ω—ñ
 * @param data –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø—ñ—Å–Ω—ñ
 * @returns –Ü—Å–Ω—É—é—á–∏–π –∞–±–æ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Å –ø—ñ—Å–Ω—ñ
 */
export async function ensureCanto(bookId: string, cantoNumber: number, data?: CantoData) {
  // 1. –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –ø—ñ—Å–Ω—é
  const { data: existing, error: fetchError } = await supabase
    .from('cantos')
    .select('*')
    .eq('book_id', bookId)
    .eq('canto_number', cantoNumber)
    .maybeSingle();
  
  if (fetchError) {
    throw new Error(`Error fetching canto: ${fetchError.message}`);
  }
  
  if (existing) {
    console.log(`  üìú Canto ${cantoNumber} found`);
    return existing;
  }
  
  // 2. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø—ñ—Å–Ω—é
  if (!data?.title_ua || !data?.title_en) {
    throw new Error('title_ua and title_en required to create canto');
  }
  
  const { data: created, error: insertError } = await supabase
    .from('cantos')
    .insert({
      book_id: bookId,
      canto_number: cantoNumber,
      title_ua: data.title_ua,
      title_en: data.title_en,
      description_ua: data.description_ua || null,
      description_en: data.description_en || null,
      is_published: true
    })
    .select()
    .single();
  
  if (insertError) {
    throw new Error(`Error creating canto: ${insertError.message}`);
  }
  
  console.log(`  ‚ú® Canto ${cantoNumber} created`);
  return created;
}
