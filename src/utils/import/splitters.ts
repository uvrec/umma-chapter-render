import { ParsedChapter, ParsedVerse, ImportTemplate } from '@/types/book-import';

// Ukrainian number words to numeric mapping (extended)
const ukrainianNumberWords: Record<string, number> = {
  '–ü–ï–†–®–ê': 1, '–ü–ï–†–®–ò–ô': 1, '–û–î–ù–ê': 1, '–û–î–ò–ù': 1,
  '–î–†–£–ì–ê': 2, '–î–†–£–ì–ò–ô': 2, '–î–í–ê': 2, '–î–í–Ü': 2,
  '–¢–†–ï–¢–Ø': 3, '–¢–†–ï–¢–Ü–ô': 3, '–¢–†–ò': 3,
  '–ß–ï–¢–í–ï–†–¢–ê': 4, '–ß–ï–¢–í–ï–†–¢–ò–ô': 4, '–ß–û–¢–ò–†–ò': 4,
  '–ü\'–Ø–¢–ê': 5, '–ü\'–Ø–¢–ò–ô': 5, '–ü\'–Ø–¢–¨': 5,
  '–®–û–°–¢–ê': 6, '–®–û–°–¢–ò–ô': 6, '–®–Ü–°–¢–¨': 6,
  '–°–¨–û–ú–ê': 7, '–°–¨–û–ú–ò–ô': 7, '–°–Ü–ú': 7,
  '–í–û–°–¨–ú–ê': 8, '–í–û–°–¨–ú–ò–ô': 8, '–í–Ü–°–Ü–ú': 8,
  '–î–ï–í\'–Ø–¢–ê': 9, '–î–ï–í\'–Ø–¢–ò–ô': 9, '–î–ï–í\'–Ø–¢–¨': 9,
  '–î–ï–°–Ø–¢–ê': 10, '–î–ï–°–Ø–¢–ò–ô': 10, '–î–ï–°–Ø–¢–¨': 10,
  '–û–î–ò–ù–ê–î–¶–Ø–¢–ê': 11, '–û–î–ò–ù–ê–î–¶–Ø–¢–ò–ô': 11,
  '–î–í–ê–ù–ê–î–¶–Ø–¢–ê': 12, '–î–í–ê–ù–ê–î–¶–Ø–¢–ò–ô': 12,
  '–¢–†–ò–ù–ê–î–¶–Ø–¢–ê': 13, '–¢–†–ò–ù–ê–î–¶–Ø–¢–ò–ô': 13,
  '–ß–û–¢–ò–†–ù–ê–î–¶–Ø–¢–ê': 14, '–ß–û–¢–ò–†–ù–ê–î–¶–Ø–¢–ò–ô': 14,
  '–ü\'–Ø–¢–ù–ê–î–¶–Ø–¢–ê': 15, '–ü\'–Ø–¢–ù–ê–î–¶–Ø–¢–ò–ô': 15,
  '–®–Ü–°–¢–ù–ê–î–¶–Ø–¢–ê': 16, '–®–Ü–°–¢–ù–ê–î–¶–Ø–¢–ò–ô': 16,
  '–°–Ü–ú–ù–ê–î–¶–Ø–¢–ê': 17, '–°–Ü–ú–ù–ê–î–¶–Ø–¢–ò–ô': 17,
  '–í–Ü–°–Ü–ú–ù–ê–î–¶–Ø–¢–ê': 18, '–í–Ü–°–Ü–ú–ù–ê–î–¶–Ø–¢–ò–ô': 18,
  '–î–ï–í\'–Ø–¢–ù–ê–î–¶–Ø–¢–ê': 19, '–î–ï–í\'–Ø–¢–ù–ê–î–¶–Ø–¢–ò–ô': 19,
  '–î–í–ê–î–¶–Ø–¢–ê': 20, '–î–í–ê–î–¶–Ø–¢–ò–ô': 20, '–î–í–ê–î–¶–Ø–¢–¨': 20,
  '–î–í–ê–î–¶–Ø–¢–¨ –ü–ï–†–®–ê': 21, '–î–í–ê–î–¶–Ø–¢–¨ –ü–ï–†–®–ò–ô': 21,
  '–î–í–ê–î–¶–Ø–¢–¨ –î–†–£–ì–ê': 22, '–î–í–ê–î–¶–Ø–¢–¨ –î–†–£–ì–ò–ô': 22,
  '–î–í–ê–î–¶–Ø–¢–¨ –¢–†–ï–¢–Ø': 23, '–î–í–ê–î–¶–Ø–¢–¨ –¢–†–ï–¢–Ü–ô': 23,
  '–î–í–ê–î–¶–Ø–¢–¨ –ß–ï–¢–í–ï–†–¢–ê': 24, '–î–í–ê–î–¶–Ø–¢–¨ –ß–ï–¢–í–ï–†–¢–ò–ô': 24,
  '–î–í–ê–î–¶–Ø–¢–¨ –ü\'–Ø–¢–ê': 25, '–î–í–ê–î–¶–Ø–¢–¨ –ü\'–Ø–¢–ò–ô': 25,
  '–î–í–ê–î–¶–Ø–¢–¨ –®–û–°–¢–ê': 26, '–î–í–ê–î–¶–Ø–¢–¨ –®–û–°–¢–ò–ô': 26,
  '–î–í–ê–î–¶–Ø–¢–¨ –°–¨–û–ú–ê': 27, '–î–í–ê–î–¶–Ø–¢–¨ –°–¨–û–ú–ò–ô': 27,
  '–î–í–ê–î–¶–Ø–¢–¨ –í–û–°–¨–ú–ê': 28, '–î–í–ê–î–¶–Ø–¢–¨ –í–û–°–¨–ú–ò–ô': 28,
  '–î–í–ê–î–¶–Ø–¢–¨ –î–ï–í\'–Ø–¢–ê': 29, '–î–í–ê–î–¶–Ø–¢–¨ –î–ï–í\'–Ø–¢–ò–ô': 29,
  '–¢–†–ò–î–¶–Ø–¢–ê': 30, '–¢–†–ò–î–¶–Ø–¢–ò–ô': 30, '–¢–†–ò–î–¶–Ø–¢–¨': 30,
};

// Roman numeral converter
function romanToInt(roman: string): number | null {
  const romanMap: { [key: string]: number } = {
    'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000
  };
  let result = 0;
  for (let i = 0; i < roman.length; i++) {
    const current = romanMap[roman[i]];
    const next = romanMap[roman[i + 1]];
    if (current === undefined) return null;
    if (next && current < next) {
      result -= current;
    } else {
      result += current;
    }
  }
  return result;
}

export function splitIntoChapters(
  text: string,
  template: ImportTemplate
): ParsedChapter[] {
  const chapters: ParsedChapter[] = [];
  // Use the pattern directly - it's already a RegExp
  const pattern = new RegExp(template.chapterPattern.source, 'gmi');
  const chapterMatches = [...text.matchAll(pattern)];
  
  console.log('üîç Looking for chapters with pattern:', template.chapterPattern);
  console.log(`üìö Found ${chapterMatches.length} chapter markers`);
  if (chapterMatches.length > 0) {
    console.log('‚úÖ First 5 chapters:', chapterMatches.slice(0, 5).map(m => m[0]));
  }
  console.log(`üìù Total text length: ${text.length} characters`);
  console.log(`üìÑ Sample text (first 500 chars):`, text.substring(0, 500));
  
  if (chapterMatches.length === 0) {
    // If no chapter markers found, treat entire text as one chapter
    return [{
      chapter_number: 1,
      title_ua: '–†–æ–∑–¥—ñ–ª 1',
      verses: splitIntoVerses(text, template)
    }];
  }
  
  chapterMatches.forEach((match, index) => {
    const rawNumber = match[1] || '';
    
    // Try to parse as number first
    let chapterNum = parseInt(rawNumber);
    
    // If not a number, try Roman numerals
    if (isNaN(chapterNum)) {
      const upperRaw = rawNumber.toUpperCase().trim();
      const romanNum = romanToInt(upperRaw);
      if (romanNum) {
        chapterNum = romanNum;
      } else {
        // Try Ukrainian words
        chapterNum = ukrainianNumberWords[upperRaw] || (index + 1);
      }
    }
    
    const startPos = match.index || 0;
    const endPos = chapterMatches[index + 1]?.index || text.length;
    const chapterText = text.substring(startPos, endPos);
    
    // Extract chapter title - try "–ì–õ–ê–í–ê N: –ù–∞–∑–≤–∞" and "–ì–õ–ê–í–ê N\n–ù–∞–∑–≤–∞" formats
    let chapterTitle = `–ì–ª–∞–≤–∞ ${chapterNum}`;
    const titleMatch1 = chapterText.match(/^(?:–ì–õ–ê–í–ê|–†–û–ó–î–Ü–õ|CHAPTER)[^\n]*?:\s*(.+?)(?:\n|$)/mi);
    if (titleMatch1) {
      chapterTitle = titleMatch1[1].trim();
    } else {
      const titleMatch2 = chapterText.match(/^(?:–ì–õ–ê–í–ê|–†–û–ó–î–Ü–õ|CHAPTER)[^\n]*?\n\s*([–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë][^\n]+?)(?:\n|$)/mi);
      if (titleMatch2) {
        chapterTitle = titleMatch2[1].trim();
      }
    }
    
    const verses = splitIntoVerses(chapterText, template);
    
    // Always include all chapters (don't filter by verse count)
    chapters.push({
      chapter_number: chapterNum,
      title_ua: chapterTitle,
      verses: verses
    });
    
    console.log(`üìñ Chapter ${chapterNum}: "${chapterTitle}" (${verses.length} verses)`);
  });
  
  return chapters;
}

export function splitIntoVerses(
  chapterText: string,
  template: ImportTemplate
): ParsedVerse[] {
  const verses: ParsedVerse[] = [];
  // Use the pattern directly - it's already a RegExp
  const pattern = new RegExp(template.versePattern.source, 'gmi');
  const verseMatches = [...chapterText.matchAll(pattern)];
  
  console.log(`üîç Verse pattern:`, template.versePattern);
  console.log(`üìä Found ${verseMatches.length} verse markers`);
  if (verseMatches.length > 0) {
    console.log(`‚úÖ First verse:`, verseMatches[0][0]);
    console.log(`‚úÖ Last verse:`, verseMatches[verseMatches.length - 1][0]);
  }
  console.log(`üìù Sample text (first 300 chars):`, chapterText.substring(0, 300));
  
  if (verseMatches.length === 0) {
    console.warn('No verse matches found, attempting paragraph split');
    // Fallback: split by double newlines
    const paragraphs = chapterText.split(/\n\s*\n/).filter(p => p.trim().length > 20);
    console.log(`Fallback: –∑–Ω–∞–π–¥–µ–Ω–æ ${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ–≤`);
    paragraphs.forEach((para, index) => {
      verses.push(parseVerse((index + 1).toString(), para, template));
    });
    return verses;
  }
  
  verseMatches.forEach((match, index) => {
    const verseNum = normalizeVerseNumber(match[1] || (index + 1).toString());
    const startPos = match.index || 0;
    const endPos = verseMatches[index + 1]?.index || chapterText.length;
    const verseText = chapterText.substring(startPos, endPos);
    
    const verse = parseVerse(verseNum, verseText, template);
    if (verse.verse_number) {
      verses.push(verse);
    } else {
      console.warn(`Skipping verse at index ${index} - no verse number`);
    }
  });
  
  return verses;
}

function normalizeVerseNumber(raw: string): string {
  return raw.replace(/[^\d.-]/g, '').trim();
}

function parseVerse(
  verseNumber: string,
  text: string,
  template: ImportTemplate
): ParsedVerse {
  const verse: ParsedVerse = { verse_number: verseNumber };
  
  const lines = text.split('\n').filter(l => l.trim());
  
  // Extract Sanskrit - collect all consecutive Devanagari lines
  const sanskritLines: string[] = [];
  let translitStartIndex = -1;
  
  for (let i = 1; i < lines.length; i++) { // Start from 1 to skip verse number
    const line = lines[i].trim();
    
    // Check if line contains Devanagari characters
    if (/[\u0900-\u097F]/.test(line)) {
      sanskritLines.push(line);
    } else if (sanskritLines.length > 0) {
      // Found end of Sanskrit section
      translitStartIndex = i;
      break;
    }
  }
  
  if (sanskritLines.length > 0) {
    verse.sanskrit = sanskritLines.join('\n');
  }
  
  // Extract Transliteration - collect Ukrainian lines with diacritics after Sanskrit
  const translitLines: string[] = [];
  if (translitStartIndex !== -1) {
    for (let i = translitStartIndex; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // Stop if we hit section headers
      if (line.match(template.synonymsPattern) ||
          line.match(template.translationPattern) ||
          line.match(template.commentaryPattern)) {
        break;
      }
      
      // Check if line contains Ukrainian letters (with or without diacritics)
      // Skip lines that are section headers
      if (/[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]/.test(line) && 
          !line.match(/^(?:–í–Ü–†–®|–¢–ï–ö–°–¢|–ü–û–°–õ–Ü–í–ù–ò–ô|–ü–ï–†–ï–ö–õ–ê–î|–ü–û–Ø–°–ù–ï–ù–ù–Ø)/i)) {
        translitLines.push(line);
      } else if (translitLines.length > 0) {
        // Stop if we've collected some and hit non-Ukrainian line
        break;
      }
    }
  }
  
  if (translitLines.length > 0) {
    verse.transliteration = translitLines.join('\n');
  }
  
  // Extract synonyms
  const synonymsMatch = text.match(template.synonymsPattern);
  if (synonymsMatch && synonymsMatch.index !== undefined) {
    const synonymsStart = synonymsMatch.index + synonymsMatch[0].length;
    const translationMatch = text.match(template.translationPattern);
    const synonymsEnd = translationMatch?.index || text.length;
    const synonymsText = text.substring(synonymsStart, synonymsEnd).trim();
    if (synonymsText.length > 0) {
      verse.synonyms_ua = synonymsText;
    }
  }
  
  // Extract translation
  const translationMatch = text.match(template.translationPattern);
  if (translationMatch && translationMatch.index !== undefined) {
    const translationStart = translationMatch.index + translationMatch[0].length;
    const commentaryMatch = text.match(template.commentaryPattern);
    const translationEnd = commentaryMatch?.index || text.length;
    const translationText = text.substring(translationStart, translationEnd).trim();
    if (translationText.length > 0) {
      verse.translation_ua = translationText;
    }
  }
  
  // Extract commentary
  const commentaryMatch = text.match(template.commentaryPattern);
  if (commentaryMatch && commentaryMatch.index !== undefined) {
    const commentaryStart = commentaryMatch.index + commentaryMatch[0].length;
    const commentaryText = text.substring(commentaryStart).trim();
    if (commentaryText.length > 0) {
      verse.commentary_ua = commentaryText;
    }
  }
  
  return verse;
}

export function customSplitByRegex(
  text: string,
  verseRegex: string,
  synonymsRegex: string,
  translationRegex: string,
  commentaryRegex: string
): ParsedVerse[] {
  const template: ImportTemplate = {
    id: 'custom',
    name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π',
    versePattern: new RegExp(verseRegex, 'mi'),
    synonymsPattern: new RegExp(synonymsRegex, 'mi'),
    translationPattern: new RegExp(translationRegex, 'mi'),
    commentaryPattern: new RegExp(commentaryRegex, 'mi'),
    chapterPattern: /^CHAPTER\s+(\d+)/mi,
  };
  
  return splitIntoVerses(text, template);
}
