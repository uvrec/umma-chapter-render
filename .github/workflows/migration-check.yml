name: Database Migration Check

on:
  pull_request:
    paths:
      - 'migrations/**'
      - 'src/**'
      - '.github/workflows/migration-check.yml'
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      action:
        description: 'Action to run'
        required: false
        default: dry-run

env:
  MIGRATIONS_PATH: migrations
  ARTIFACT_DIR: ci_artifacts

jobs:
  pre-migration-check:
    name: Pre-Migration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Resolve environment and PG_CONNECTION
        id: env
        run: |
          # Resolve environment (from input or default)
          ENV="${{ github.event.inputs.environment || 'staging' }}"
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          # Map to secret name (lowercase)
          # Expected secrets: PG_CONNECTION_staging, PG_CONNECTION_production
          if [ "$ENV" = "production" ]; then
            echo "pg_secret=PG_CONNECTION_production" >> $GITHUB_OUTPUT
          else
            echo "pg_secret=PG_CONNECTION_staging" >> $GITHUB_OUTPUT
          fi

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Validate PG_CONNECTION secret exists
        run: |
          SECRET_NAME="${{ steps.env.outputs.pg_secret }}"
          echo "Looking for secret: $SECRET_NAME"
          # This step cannot actually read secrets; just ensure user created them
          # If the secret is missing, psql step will fail later.
          echo "Ensure GitHub secret $SECRET_NAME is configured (PG connection string)."

      - name: Test DB connectivity
        env:
          PG_CONNECTION: ${{ secrets.PG_CONNECTION_staging }}
        if: ${{ github.event.inputs.environment != 'production' }}
        run: |
          set -euo pipefail
          echo "Testing connection to staging..."
          psql "$PG_CONNECTION" -c "SELECT 1;" -q

      - name: Test DB connectivity (production)
        env:
          PG_CONNECTION: ${{ secrets.PG_CONNECTION_production }}
        if: ${{ github.event.inputs.environment == 'production' }}
        run: |
          set -euo pipefail
          echo "Testing connection to production..."
          psql "$PG_CONNECTION" -c "SELECT 1;" -q

      - name: Run pre-migration checks
        id: pre_check
        env:
          PG_CONNECTION: ${{ secrets.PG_CONNECTION_staging }}
        run: |
          set -euo pipefail
          mkdir -p $ARTIFACT_DIR
          # Choose appropriate secret based on input environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            PG_CONN="${{ secrets.PG_CONNECTION_production }}"
          else
            PG_CONN="${{ secrets.PG_CONNECTION_staging }}"
          fi

          echo "Running pre-migration checks on ${PG_CONN:0:40}..."
          # Ensure ON_ERROR_STOP to get non-zero exit on errors in SQL
          PGPASSWORD="" psql "$PG_CONN" -v ON_ERROR_STOP=1 -f $MIGRATIONS_PATH/000_pre_migration_check.sql > $ARTIFACT_DIR/pre_check_results.txt 2>&1 || true

          # Detect errors / warnings
          if grep -q -i "ERROR" $ARTIFACT_DIR/pre_check_results.txt ; then
            echo "::error::Pre-migration check found ERROR"
            cat $ARTIFACT_DIR/pre_check_results.txt
            exit 1
          fi

          if grep -q "✗" $ARTIFACT_DIR/pre_check_results.txt || grep -q -i "WARNING" $ARTIFACT_DIR/pre_check_results.txt ; then
            echo "has_warnings=true" >> $GITHUB_OUTPUT
            echo "::warning::Pre-migration check found warnings (duplicates or missing extensions)"
          else
            echo "has_warnings=false" >> $GITHUB_OUTPUT
            echo "::notice::Pre-migration checks passed ✓"
          fi

      - name: Upload pre-check artifact
        uses: actions/upload-artifact@v4
        with:
          name: pre-check-results-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: ${{ env.ARTIFACT_DIR }}/pre_check_results.txt
          retention-days: 30

      - name: Comment on PR (warnings)
        if: github.event_name == 'pull_request' && steps.pre_check.outputs.has_warnings == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '${{ env.ARTIFACT_DIR }}/pre_check_results.txt';
            const results = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : 'No output';
            const body = `## ⚠️ Pre-migration Check Warnings\n\nFound potential issues in **${{ github.event.inputs.environment }}** database:\n\n\`\`\`\n${results}\n\`\`\`\n\nPlease review and fix before merging.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  dry-run-duplicates:
    name: Dry-Run Duplicate Check
    runs-on: ubuntu-latest
    needs: pre-migration-check
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run dry-run duplicate check
        id: dry_run
        env:
          # choose secret based on input environment
          PG_CONNECTION: ${{ secrets.PG_CONNECTION_staging }}
        run: |
          set -euo pipefail
          mkdir -p $ARTIFACT_DIR
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            PG_CONN="${{ secrets.PG_CONNECTION_production }}"
          else
            PG_CONN="${{ secrets.PG_CONNECTION_staging }}"
          fi

          echo "Running dry-run duplicate detection on ${PG_CONN:0:40}..."
          psql "$PG_CONN" -v ON_ERROR_STOP=0 -f migrations/fix_duplicates_dry_run.sql > $ARTIFACT_DIR/dry_run_results.txt 2>&1 || true

          # Determine duplicates presence
          if grep -q "✗ Found" $ARTIFACT_DIR/dry_run_results.txt ; then
            echo "duplicates_found=true" >> $GITHUB_OUTPUT
            # Extract SUMMARY section for PR comment (up to 50 lines)
            awk '/SUMMARY/{flag=1;next}/^$/{if(flag){exit}}flag{print}' $ARTIFACT_DIR/dry_run_results.txt | head -n 50 > $ARTIFACT_DIR/dry_run_summary.txt || true
            echo "::warning::Duplicates found - review$ARTIFACT_DIR/dry_run_summary.txt"
          else
            echo "duplicates_found=false" >> $GITHUB_OUTPUT
            echo "::notice::No duplicates found ✓"
          fi

      - name: Upload dry-run artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dry-run-results-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: ${{ env.ARTIFACT_DIR }}
          retention-days: 90

      - name: Comment on PR with dry-run summary
        if: github.event_name == 'pull_request' && steps.dry_run.outputs.duplicates_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '${{ env.ARTIFACT_DIR }}/dry_run_summary.txt';
            const results = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : 'See full artifact';
            const body = `## 🔍 Dry-Run Results (${process.env.GITHUB_EVENT_INPUTS_environment || 'staging'})\n\n### Duplicates Found\n\n\`\`\`\n${results}\n\`\`\`\n\nPlease review artifacts and run cleanup: \`psql "$PG_CONNECTION" -f migrations/fix_duplicates_v2.sql\` if appropriate.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Fail on duplicates in production
        if: ${{ github.event.inputs.environment == 'production' && steps.dry_run.outputs.duplicates_found == 'true' }}
        run: |
          echo "::error::Duplicates found in production database. Aborting deployment."
          exit 1

  migration-simulation:
    name: Migration Simulation (syntax & dry apply on test DB)
    runs-on: ubuntu-latest
    needs: dry-run-duplicates
    if: github.event_name == 'pull_request'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Prepare test DB (optional - best effort)
        env:
          PG_CONNECTION: ${{ secrets.PG_CONNECTION_staging }}
        run: |
          set -euo pipefail
          mkdir -p $ARTIFACT_DIR
          # Create lightweight test DB for syntax validation (requires permissions)
          # This attempt may fail if user lacks CREATEDB; it's best-effort and won't block PR
          TIMESTAMP=$(date +%s)
          TEST_DB="migration_test_${TIMESTAMP}"
          echo "Attempting to create test DB: $TEST_DB (best-effort)"
          # Extract base connection string (without dbname)
          # Note: If your PG_CONNECTION includes a database, you may need to provide a separate admin connection
          # Attempt simple CREATE DATABASE using psql
          if psql "$PG_CONNECTION" -c "CREATE DATABASE \"$TEST_DB\";" ; then
            echo "TEST_DB=$TEST_DB" >> $GITHUB_ENV
            # Validate SQL by running on test DB
            TEST_CONN="${PG_CONNECTION/%/*}/$TEST_DB"
            # Fallback: run syntax validate by executing inside transaction and rolling back (where possible)
            # Some DDL cannot be rolled back; we will only check syntax using psql -f with ON_ERROR_STOP and exit code capture
            echo "Running migration SQL for syntax (on test DB)..."
            psql "postgresql://$(echo $TEST_CONN | sed 's/postgresql:\/\///')" -v ON_ERROR_STOP=1 -f migrations/002_add_unique_constraints_v2.sql > $ARTIFACT_DIR/migration_simulation.txt 2>&1 || true
            # Drop test DB
            psql "$PG_CONNECTION" -c "DROP DATABASE \"$TEST_DB\";" || true
          else
            echo "Could not create test DB (no permission). Falling back to SQL syntax check (parse only)."
            # Basic syntax check: attempt to run psql with -f but redirect errors; if severe syntax errors appear, psql returns non-zero.
            psql "$PG_CONNECTION" -v ON_ERROR_STOP=1 -f migrations/002_add_unique_constraints_v2.sql > $ARTIFACT_DIR/migration_simulation.txt 2>&1 || true
          fi
          echo "Simulation complete. See $ARTIFACT_DIR/migration_simulation.txt"

      - name: Upload simulation artifact
        uses: actions/upload-artifact@v4
        with:
          name: migration-simulation-${{ github.run_number }}
          path: ${{ env.ARTIFACT_DIR }}
          retention-days: 30

      - name: Comment migration plan on PR
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## 📋 Migration Plan\n\nSQL migration file: \`migrations/002_add_unique_constraints_v2.sql\`\n\nSimulation output archived as artifact. Review before merging.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [pre-migration-check, dry-run-duplicates]
    if: always()
    steps:
      - name: Create job summary
        run: |
          echo "## 📊 Migration Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs status" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-migration check: ${{ needs.pre-migration-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dry-run duplicates: ${{ needs.dry-run-duplicates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- pre-check-results-*.txt" >> $GITHUB_STEP_SUMMARY
          echo "- dry-run-results-*/dry_run_results.txt" >> $GITHUB_STEP_SUMMARY
